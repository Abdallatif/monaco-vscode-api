diff --git a/.eslintrc.json b/.eslintrc.json
index fd88130a1e8..60c5418dc79 100644
--- a/.eslintrc.json
+++ b/.eslintrc.json
@@ -623,6 +623,7 @@
 							"v8-inspect-profiler",
 							"vscode-regexpp",
 							"vscode-textmate",
+							"vscode-oniguruma",
 							"worker_threads",
 							"@xterm/addon-canvas",
 							"@xterm/addon-image",
diff --git a/build/gulpfile.editor.js b/build/gulpfile.editor.js
index 22b70a953df..3a56cc4cb0d 100644
--- a/build/gulpfile.editor.js
+++ b/build/gulpfile.editor.js
@@ -404,17 +404,10 @@ gulp.task('editor-distro',
 			util.rimraf('out-editor-min')
 		),
 		extractEditorSrcTask,
-		task.parallel(
-			task.series(
-				compileEditorAMDTask,
-				optimizeEditorAMDTask,
-				minifyEditorAMDTask
-			),
-			task.series(
-				createESMSourcesAndResourcesTask,
-				compileEditorESMTask,
-				appendJSToESMImportsTask
-			)
+		task.series(
+			createESMSourcesAndResourcesTask,
+			compileEditorESMTask,
+			appendJSToESMImportsTask
 		),
 		finalEditorResourcesTask
 	)
diff --git a/build/lib/standalone.js b/build/lib/standalone.js
index 4ddf88ed223..ddb16108fda 100644
--- a/build/lib/standalone.js
+++ b/build/lib/standalone.js
@@ -134,7 +134,7 @@ function createESMSourcesAndResources2(options) {
         }
         if (file === 'tsconfig.json') {
             const tsConfig = JSON.parse(fs.readFileSync(path.join(SRC_FOLDER, file)).toString());
-            tsConfig.compilerOptions.module = 'es6';
+            tsConfig.compilerOptions.module = 'es2020';
             tsConfig.compilerOptions.outDir = path.join(path.relative(OUT_FOLDER, OUT_RESOURCES_FOLDER), 'vs').replace(/\\/g, '/');
             write(getDestAbsoluteFilePath(file), JSON.stringify(tsConfig, null, '\t'));
             continue;
@@ -150,6 +150,9 @@ function createESMSourcesAndResources2(options) {
             const info = ts.preProcessFile(fileContents);
             for (let i = info.importedFiles.length - 1; i >= 0; i--) {
                 const importedFilename = info.importedFiles[i].fileName;
+                if (!importedFilename.startsWith('vs/')) {
+                    continue;
+                }
                 const pos = info.importedFiles[i].pos;
                 const end = info.importedFiles[i].end;
                 let importedFilepath;
@@ -172,6 +175,10 @@ function createESMSourcesAndResources2(options) {
                 else {
                     relativePath = path.relative(path.dirname(file), importedFilepath);
                 }
+                if (relativePath.endsWith('..')) {
+                    // When a folder have the same name as a file
+                    relativePath = relativePath + '/../' + path.basename(importedFilepath);
+                }
                 relativePath = relativePath.replace(/\\/g, '/');
                 if (!/(^\.\/)|(^\.\.\/)/.test(relativePath)) {
                     relativePath = './' + relativePath;
@@ -183,6 +190,13 @@ function createESMSourcesAndResources2(options) {
             fileContents = fileContents.replace(/import ([a-zA-Z0-9]+) = require\(('[^']+')\);/g, function (_, m1, m2) {
                 return `import * as ${m1} from ${m2};`;
             });
+            if (!file.includes('vs/nls')) {
+                fileContents = fileContents.replace(/\b(localize2?)\(/g, function (_, name) {
+                    return `${name}WithPath('${file.slice(0, -3)}', `;
+                });
+            }
+            fileContents = fileContents.replace(/import { (localize2?) }/g, 'import { $1WithPath }');
+            fileContents = fileContents.replace(/import { localize, localize2 }/g, 'import { localizeWithPath, localize2WithPath }');
             write(getDestAbsoluteFilePath(file), fileContents);
             continue;
         }
diff --git a/build/lib/standalone.ts b/build/lib/standalone.ts
index 775a1be5996..224f376d4bf 100644
--- a/build/lib/standalone.ts
+++ b/build/lib/standalone.ts
@@ -160,7 +160,7 @@ export function createESMSourcesAndResources2(options: IOptions2): void {
 
 		if (file === 'tsconfig.json') {
 			const tsConfig = JSON.parse(fs.readFileSync(path.join(SRC_FOLDER, file)).toString());
-			tsConfig.compilerOptions.module = 'es6';
+			tsConfig.compilerOptions.module = 'es2020';
 			tsConfig.compilerOptions.outDir = path.join(path.relative(OUT_FOLDER, OUT_RESOURCES_FOLDER), 'vs').replace(/\\/g, '/');
 			write(getDestAbsoluteFilePath(file), JSON.stringify(tsConfig, null, '\t'));
 			continue;
@@ -180,6 +180,9 @@ export function createESMSourcesAndResources2(options: IOptions2): void {
 
 			for (let i = info.importedFiles.length - 1; i >= 0; i--) {
 				const importedFilename = info.importedFiles[i].fileName;
+				if (!importedFilename.startsWith('vs/')) {
+					continue;
+				}
 				const pos = info.importedFiles[i].pos;
 				const end = info.importedFiles[i].end;
 
@@ -201,6 +204,10 @@ export function createESMSourcesAndResources2(options: IOptions2): void {
 				} else {
 					relativePath = path.relative(path.dirname(file), importedFilepath);
 				}
+				if (relativePath.endsWith('..')) {
+					// When a folder have the same name as a file
+					relativePath = relativePath + '/../' + path.basename(importedFilepath);
+				}
 				relativePath = relativePath.replace(/\\/g, '/');
 				if (!/(^\.\/)|(^\.\.\/)/.test(relativePath)) {
 					relativePath = './' + relativePath;
@@ -216,6 +223,14 @@ export function createESMSourcesAndResources2(options: IOptions2): void {
 				return `import * as ${m1} from ${m2};`;
 			});
 
+			if (!file.includes('vs/nls')) {
+				fileContents = fileContents.replace(/\b(localize2?)\(/g, function (_, name) {
+					return `${name}WithPath('${file.slice(0, -3)}', `;
+				});
+			}
+			fileContents = fileContents.replace(/import { (localize2?) }/g, 'import { $1WithPath }');
+			fileContents = fileContents.replace(/import { localize, localize2 }/g, 'import { localizeWithPath, localize2WithPath }');
+
 			write(getDestAbsoluteFilePath(file), fileContents);
 			continue;
 		}
diff --git a/extensions/markdown-language-features/src/extension.browser.ts b/extensions/markdown-language-features/src/extension.browser.ts
index 30639672490..2095905a4d8 100644
--- a/extensions/markdown-language-features/src/extension.browser.ts
+++ b/extensions/markdown-language-features/src/extension.browser.ts
@@ -30,7 +30,7 @@ function startServer(context: vscode.ExtensionContext, parser: IMdParser): Promi
 	const serverMain = vscode.Uri.joinPath(context.extensionUri, 'server/dist/browser/workerMain.js');
 
 	const worker = new Worker(serverMain.toString());
-	worker.postMessage({ i10lLocation: vscode.l10n.uri?.toString() ?? '' });
+	worker.postMessage({ i10lLocation: vscode.l10n.uri?.toString(true) ?? '' });
 
 	return startClient((id: string, name: string, clientOptions: LanguageClientOptions) => {
 		return new LanguageClient(id, name, clientOptions, worker);
diff --git a/extensions/typescript-language-features/web/src/pathMapper.ts b/extensions/typescript-language-features/web/src/pathMapper.ts
index e92548950fc..a0c2c248f96 100644
--- a/extensions/typescript-language-features/web/src/pathMapper.ts
+++ b/extensions/typescript-language-features/web/src/pathMapper.ts
@@ -20,7 +20,7 @@ export class PathMapper {
 			return URI.from({
 				scheme: this.extensionUri.scheme,
 				authority: this.extensionUri.authority,
-				path: this.extensionUri.path + '/dist/browser/typescript/' + filepath.slice(1)
+				path: this.extensionUri.path.replace(/\/$/, '') + '/dist/browser/typescript/' + filepath.slice(1)
 			});
 		}
 
@@ -76,7 +76,7 @@ export function fromResource(extensionUri: URI, uri: URI) {
 		&& uri.path.endsWith('.d.ts')) {
 		return uri.path;
 	}
-	return `/${uri.scheme}/${uri.authority}${uri.path}`;
+	return `/${uri.scheme}/${uri.authority || 'ts-nul-authority'}${uri.path}`;
 }
 
 export function looksLikeLibDtsPath(filepath: string) {
diff --git a/extensions/typescript-language-features/web/src/serverHost.ts b/extensions/typescript-language-features/web/src/serverHost.ts
index f2f9ca95996..f5c28ec0cab 100644
--- a/extensions/typescript-language-features/web/src/serverHost.ts
+++ b/extensions/typescript-language-features/web/src/serverHost.ts
@@ -88,7 +88,7 @@ function createServerHost(
 
 			const scriptPath = combinePaths(packageRoot, browser);
 			try {
-				const { default: module } = await import(/* webpackIgnore: true */ scriptPath);
+				const { default: module } = await new Function('url', 'return importExt(url)')(scriptPath);
 				return { module, error: undefined };
 			} catch (e) {
 				return { module: undefined, error: e };
diff --git a/extensions/typescript-language-features/web/src/typingsInstaller/typingsInstaller.ts b/extensions/typescript-language-features/web/src/typingsInstaller/typingsInstaller.ts
index 7c40993d6df..7480fbb21c3 100644
--- a/extensions/typescript-language-features/web/src/typingsInstaller/typingsInstaller.ts
+++ b/extensions/typescript-language-features/web/src/typingsInstaller/typingsInstaller.ts
@@ -66,6 +66,8 @@ export class WebTypingsInstallerClient implements ts.server.ITypingsInstaller {
 			case 'action::packageInstalled':
 			case 'action::invalidate':
 			case 'action::set':
+			// missing case leads to error
+			case 'action::watchTypingLocations':
 				this.projectService!.updateTypingsForProject(response);
 				break;
 			case 'event::beginInstallTypes':
diff --git a/src/tsconfig.base.json b/src/tsconfig.base.json
index c0a2e174591..1d80c22afa3 100644
--- a/src/tsconfig.base.json
+++ b/src/tsconfig.base.json
@@ -1,6 +1,7 @@
 {
 	"compilerOptions": {
-		"module": "amd",
+		"esModuleInterop": true,
+		"module": "ES2020",
 		"moduleResolution": "node",
 		"experimentalDecorators": true,
 		"noImplicitReturns": true,
diff --git a/src/tsconfig.monaco.json b/src/tsconfig.monaco.json
index 988f0485713..c73b524ea2a 100644
--- a/src/tsconfig.monaco.json
+++ b/src/tsconfig.monaco.json
@@ -7,11 +7,11 @@
 			"wicg-file-system-access"
 		],
 		"paths": {},
-		"module": "amd",
+		"module": "es2020",
 		"moduleResolution": "classic",
 		"removeComments": false,
 		"preserveConstEnums": true,
-		"target": "es2018",
+		"target": "es2020",
 		"sourceMap": false,
 		"declaration": true
 	},
diff --git a/src/vs/base/browser/defaultWorkerFactory.ts b/src/vs/base/browser/defaultWorkerFactory.ts
index 4f42810f0bd..58b0747c812 100644
--- a/src/vs/base/browser/defaultWorkerFactory.ts
+++ b/src/vs/base/browser/defaultWorkerFactory.ts
@@ -5,7 +5,9 @@
 
 import { createTrustedTypesPolicy } from 'vs/base/browser/trustedTypes';
 import { onUnexpectedError } from 'vs/base/common/errors';
+// ESM-comment-begin
 import { COI } from 'vs/base/common/network';
+// ESM-comment-end
 import { IWorker, IWorkerCallback, IWorkerFactory, logOnceWebWorkerWarning } from 'vs/base/common/worker/simpleWorker';
 
 const ttPolicy = createTrustedTypesPolicy('defaultWorkerFactory', { createScriptURL: value => value });
diff --git a/src/vs/base/common/network.ts b/src/vs/base/common/network.ts
index 00ad27c3d55..9e5e31ad723 100644
--- a/src/vs/base/common/network.ts
+++ b/src/vs/base/common/network.ts
@@ -4,6 +4,8 @@
  *--------------------------------------------------------------------------------------------*/
 
 import * as errors from 'vs/base/common/errors';
+import { IDisposable, toDisposable } from 'vs/base/common/lifecycle';
+import { ResourceMap } from 'vs/base/common/map';
 import * as platform from 'vs/base/common/platform';
 import { equalsIgnoreCase, startsWithIgnoreCase } from 'vs/base/common/strings';
 import { URI } from 'vs/base/common/uri';
@@ -210,6 +212,30 @@ export const VSCODE_AUTHORITY = 'vscode-app';
 class FileAccessImpl {
 
 	private static readonly FALLBACK_AUTHORITY = VSCODE_AUTHORITY;
+	private staticBrowserUris = new ResourceMap<URI>();
+	private appResourcePathUrls = new Map<string, string | (() => string)>();
+
+	private moduleContentProvider = new Map<string, () => Promise<any>>();
+
+	public registerModuleContentProvider(moduleId: string, contentLoader: () => Promise<any>) {
+		this.moduleContentProvider.set(moduleId, contentLoader);
+	}
+
+	public toModuleContent<T>(moduleId: string): Promise<T> {
+		return this.moduleContentProvider.get(moduleId)!();
+	}
+
+	public registerAppResourcePathUrl(moduleId: string, url: string | (() => string)): void {
+		this.appResourcePathUrls.set(moduleId, url);
+	}
+
+	private toUrl(moduleId: string): string {
+		let url = this.appResourcePathUrls.get(moduleId);
+		if (typeof url === 'function') {
+			url = url();
+		}
+		return new URL(url ?? moduleId, globalThis.location?.href ?? import.meta.url).toString();
+	}
 
 	/**
 	 * Returns a URI to use in contexts where the browser is responsible
@@ -218,7 +244,7 @@ class FileAccessImpl {
 	 * **Note:** use `dom.ts#asCSSUrl` whenever the URL is to be used in CSS context.
 	 */
 	asBrowserUri(resourcePath: AppResourcePath | ''): URI {
-		const uri = this.toUri(resourcePath, require);
+		const uri = this.toUri(resourcePath, { toUrl: this.toUrl.bind(this) });
 		return this.uriToBrowserUri(uri);
 	}
 
@@ -257,7 +283,7 @@ class FileAccessImpl {
 			});
 		}
 
-		return uri;
+		return this.staticBrowserUris.get(uri) ?? uri;
 	}
 
 	/**
@@ -265,7 +291,7 @@ class FileAccessImpl {
 	 * is responsible for loading.
 	 */
 	asFileUri(resourcePath: AppResourcePath | ''): URI {
-		const uri = this.toUri(resourcePath, require);
+		const uri = this.toUri(resourcePath, { toUrl: this.toUrl.bind(this) });
 		return this.uriToFileUri(uri);
 	}
 
@@ -297,6 +323,19 @@ class FileAccessImpl {
 
 		return URI.parse(moduleIdToUrl.toUrl(uriOrModule));
 	}
+
+	registerStaticBrowserUri(uri: URI, browserUri: URI): IDisposable {
+		this.staticBrowserUris.set(uri, browserUri);
+		return toDisposable(() => {
+			if (this.staticBrowserUris.get(uri) === browserUri) {
+				this.staticBrowserUris.delete(uri);
+			}
+		});
+	}
+
+	getRegisteredBrowserUris(): IterableIterator<URI> {
+		return this.staticBrowserUris.keys();
+	}
 }
 
 export const FileAccess = new FileAccessImpl();
diff --git a/src/vs/base/common/performance.js b/src/vs/base/common/performance.js
index aff4d0734de..ea43e4a2fcc 100644
--- a/src/vs/base/common/performance.js
+++ b/src/vs/base/common/performance.js
@@ -6,7 +6,7 @@
 'use strict';
 
 //@ts-check
-
+// ESM-comment-begin
 (function () {
 
 	/**
@@ -123,3 +123,27 @@
 	}
 
 })();
+// ESM-comment-end
+
+// ESM-uncomment-begin
+// export const mark = (name) => {
+// 	performance.mark(name);
+// };
+
+// export const getMarks = () => {
+// 	let timeOrigin = performance.timeOrigin;
+// 	if (typeof timeOrigin !== 'number') {
+// 		// safari: there is no timerOrigin but in renderers there is the timing-property
+// 		// see https://bugs.webkit.org/show_bug.cgi?id=174862
+// 		timeOrigin = performance.timing.navigationStart || performance.timing.redirectStart || performance.timing.fetchStart;
+// 	}
+// 	const result = [{ name: 'code/timeOrigin', startTime: Math.round(timeOrigin) }];
+// 	for (const entry of performance.getEntriesByType('mark')) {
+// 		result.push({
+// 			name: entry.name,
+// 			startTime: Math.round(timeOrigin + entry.startTime)
+// 		});
+// 	}
+// 	return result;
+// };
+// ESM-uncomment-end
diff --git a/src/vs/editor/browser/config/editorConfiguration.ts b/src/vs/editor/browser/config/editorConfiguration.ts
index cf9154ce7d6..5c954f75f8e 100644
--- a/src/vs/editor/browser/config/editorConfiguration.ts
+++ b/src/vs/editor/browser/config/editorConfiguration.ts
@@ -269,7 +269,7 @@ export class ComputedEditorOptions implements IComputedEditorOptions {
 	}
 }
 
-class EditorOptionsUtil {
+export class EditorOptionsUtil {
 
 	public static validateOptions(options: IEditorOptions): ValidatedEditorOptions {
 		const result = new ValidatedEditorOptions();
diff --git a/src/vs/editor/contrib/find/browser/findController.ts b/src/vs/editor/contrib/find/browser/findController.ts
index 53610a95455..8eed8cf99e4 100644
--- a/src/vs/editor/contrib/find/browser/findController.ts
+++ b/src/vs/editor/contrib/find/browser/findController.ts
@@ -30,6 +30,7 @@ import { INotificationService, Severity } from 'vs/platform/notification/common/
 import { IQuickInputService } from 'vs/platform/quickinput/common/quickInput';
 import { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';
 import { IThemeService, themeColorFromId } from 'vs/platform/theme/common/themeService';
+import { Selection } from 'vs/editor/common/core/selection';
 
 const SEARCH_STRING_MAX_LENGTH = 524288;
 
@@ -258,8 +259,8 @@ export class CommonFindController extends Disposable implements IEditorContribut
 			this._state.change({ searchScope: null }, true);
 		} else {
 			if (this._editor.hasModel()) {
-				const selections = this._editor.getSelections();
-				selections.map(selection => {
+				let selections = this._editor.getSelections();
+				selections = selections.map(selection => {
 					if (selection.endColumn === 1 && selection.endLineNumber > selection.startLineNumber) {
 						selection = selection.setEndPosition(
 							selection.endLineNumber - 1,
@@ -270,7 +271,7 @@ export class CommonFindController extends Disposable implements IEditorContribut
 						return selection;
 					}
 					return null;
-				}).filter(element => !!element);
+				}).filter((element): element is Selection => !!element);
 
 				if (selections.length) {
 					this._state.change({ searchScope: selections }, true);
diff --git a/src/vs/editor/contrib/find/browser/findWidget.ts b/src/vs/editor/contrib/find/browser/findWidget.ts
index 7f675f67e9d..9c20173bd7a 100644
--- a/src/vs/editor/contrib/find/browser/findWidget.ts
+++ b/src/vs/editor/contrib/find/browser/findWidget.ts
@@ -43,6 +43,7 @@ import { ThemeIcon } from 'vs/base/common/themables';
 import { isHighContrast } from 'vs/platform/theme/common/theme';
 import { assertIsDefined } from 'vs/base/common/types';
 import { defaultInputBoxStyles, defaultToggleStyles } from 'vs/platform/theme/browser/defaultStyles';
+import { Selection } from 'vs/editor/common/core/selection';
 
 const findSelectionIcon = registerIcon('find-selection', Codicon.selection, nls.localize('findSelectionIcon', 'Icon for \'Find in Selection\' in the editor find widget.'));
 const findCollapsedIcon = registerIcon('find-collapsed', Codicon.chevronRight, nls.localize('findCollapsedIcon', 'Icon to indicate that the editor find widget is collapsed.'));
@@ -1051,8 +1052,8 @@ export class FindWidget extends Widget implements IOverlayWidget, IVerticalSashL
 		this._register(this._toggleSelectionFind.onChange(() => {
 			if (this._toggleSelectionFind.checked) {
 				if (this._codeEditor.hasModel()) {
-					const selections = this._codeEditor.getSelections();
-					selections.map(selection => {
+					let selections = this._codeEditor.getSelections();
+					selections = selections.map(selection => {
 						if (selection.endColumn === 1 && selection.endLineNumber > selection.startLineNumber) {
 							selection = selection.setEndPosition(selection.endLineNumber - 1, this._codeEditor.getModel()!.getLineMaxColumn(selection.endLineNumber - 1));
 						}
@@ -1060,7 +1061,7 @@ export class FindWidget extends Widget implements IOverlayWidget, IVerticalSashL
 							return selection;
 						}
 						return null;
-					}).filter(element => !!element);
+					}).filter((element): element is Selection => !!element);
 
 					if (selections.length) {
 						this._state.change({ searchScope: selections as Range[] }, true);
diff --git a/src/vs/editor/contrib/semanticTokens/browser/documentSemanticTokens.ts b/src/vs/editor/contrib/semanticTokens/browser/documentSemanticTokens.ts
index 10ad6211d76..9ed4aca8706 100644
--- a/src/vs/editor/contrib/semanticTokens/browser/documentSemanticTokens.ts
+++ b/src/vs/editor/contrib/semanticTokens/browser/documentSemanticTokens.ts
@@ -59,6 +59,7 @@ export class DocumentSemanticTokensFeature extends Disposable {
 				}
 			}
 		};
+		modelService.getModels().forEach(model => register(model));
 		this._register(modelService.onModelAdded((model) => {
 			if (isSemanticColoringEnabled(model, themeService, configurationService)) {
 				register(model);
diff --git a/src/vs/editor/editor.main.ts b/src/vs/editor/editor.main.ts
index 23d547570e9..31dfb4fd8d4 100644
--- a/src/vs/editor/editor.main.ts
+++ b/src/vs/editor/editor.main.ts
@@ -5,12 +5,5 @@
 
 import 'vs/editor/editor.all';
 import 'vs/editor/standalone/browser/iPadShowKeyboard/iPadShowKeyboard';
-import 'vs/editor/standalone/browser/inspectTokens/inspectTokens';
-import 'vs/editor/standalone/browser/quickAccess/standaloneHelpQuickAccess';
-import 'vs/editor/standalone/browser/quickAccess/standaloneGotoLineQuickAccess';
-import 'vs/editor/standalone/browser/quickAccess/standaloneGotoSymbolQuickAccess';
-import 'vs/editor/standalone/browser/quickAccess/standaloneCommandsQuickAccess';
-import 'vs/editor/standalone/browser/referenceSearch/standaloneReferenceSearch';
-import 'vs/editor/standalone/browser/toggleHighContrast/toggleHighContrast';
 
 export * from 'vs/editor/editor.api';
diff --git a/src/vs/editor/standalone/browser/standaloneServices.ts b/src/vs/editor/standalone/browser/standaloneServices.ts
index 19eee1dcc54..a15870fdcf3 100644
--- a/src/vs/editor/standalone/browser/standaloneServices.ts
+++ b/src/vs/editor/standalone/browser/standaloneServices.ts
@@ -89,8 +89,6 @@ import { DefaultConfiguration } from 'vs/platform/configuration/common/configura
 import { WorkspaceEdit } from 'vs/editor/common/languages';
 import { AudioCue, IAudioCueService, Sound } from 'vs/platform/audioCues/browser/audioCueService';
 import { LogService } from 'vs/platform/log/common/logService';
-import { getEditorFeatures } from 'vs/editor/common/editorFeatures';
-import { onUnexpectedError } from 'vs/base/common/errors';
 import { ExtensionKind, IEnvironmentService, IExtensionHostDebugParams } from 'vs/platform/environment/common/environment';
 import { mainWindow } from 'vs/base/browser/window';
 
@@ -513,15 +511,19 @@ export class StandaloneKeybindingService extends AbstractKeybindingService {
 		});
 	}
 
-	private updateResolver(): void {
+	protected updateResolver(): void {
 		this._cachedResolver = null;
 		this._onDidUpdateKeybindings.fire();
 	}
 
+	protected getUserKeybindingItems() {
+		return this._toNormalizedKeybindingItems(this._dynamicKeybindings, false);
+	}
+
 	protected _getResolver(): KeybindingResolver {
 		if (!this._cachedResolver) {
 			const defaults = this._toNormalizedKeybindingItems(KeybindingsRegistry.getDefaultKeybindings(), true);
-			const overrides = this._toNormalizedKeybindingItems(this._dynamicKeybindings, false);
+			const overrides = this.getUserKeybindingItems();
 			this._cachedResolver = new KeybindingResolver(defaults, overrides, (str) => this._log(str));
 		}
 		return this._cachedResolver;
@@ -542,7 +544,7 @@ export class StandaloneKeybindingService extends AbstractKeybindingService {
 				// This might be a removal keybinding item in user settings => accept it
 				result[resultLen++] = new ResolvedKeybindingItem(undefined, item.command, item.commandArgs, when, isDefault, null, false);
 			} else {
-				const resolvedKeybindings = USLayoutResolvedKeybinding.resolveKeybinding(keybinding, OS);
+				const resolvedKeybindings = this.resolveKeybinding(keybinding);
 				for (const resolvedKeybinding of resolvedKeybindings) {
 					result[resultLen++] = new ResolvedKeybindingItem(resolvedKeybinding, item.command, item.commandArgs, when, isDefault, null, false);
 				}
@@ -1166,16 +1168,6 @@ export module StandaloneServices {
 			}
 		}
 
-		// Instantiate all editor features
-		const editorFeatures = getEditorFeatures();
-		for (const feature of editorFeatures) {
-			try {
-				instantiationService.createInstance(feature);
-			} catch (err) {
-				onUnexpectedError(err);
-			}
-		}
-
 		onDidInitialize.fire();
 
 		return instantiationService;
diff --git a/src/vs/nls.ts b/src/vs/nls.ts
index af0a0b96071..a7f0210f93e 100644
--- a/src/vs/nls.ts
+++ b/src/vs/nls.ts
@@ -164,6 +164,35 @@ export function localize(data: ILocalizeInfo | string, message: string, ...args:
 	return _format(message, args);
 }
 
+let locale: string | undefined = undefined;
+let translations: Record<string, Record<string, string>> = {};
+
+export function setLocale(_locale: string, _translations: Record<string, Record<string, string>>) {
+	locale = _locale;
+	translations = _translations;
+}
+
+/**
+ * @skipMangle
+ */
+export function localizeWithPath(path: string, data: ILocalizeInfo | string, defaultMessage: string, ...args: (string | number | boolean | undefined | null)[]): string {
+	const key = typeof data === 'object' ? data.key : data;
+	const message = (translations[path] ?? {})[key] ?? defaultMessage;
+	return _format(message, args);
+}
+
+/**
+ * @skipMangle
+ */
+export function localize2WithPath(path: string, data: ILocalizeInfo | string, defaultMessage: string, ...args: (string | number | boolean | undefined | null)[]): ILocalizedString {
+	const key = typeof data === 'object' ? data.key : data;
+	const message = (translations[path] ?? {})[key] ?? defaultMessage;
+	return {
+		value: _format(message, args),
+		original: _format(defaultMessage, args)
+	};
+}
+
 /**
  * Marks a string to be localized. Returns an {@linkcode ILocalizedString}
  * which contains the localized string and the original string.
@@ -217,7 +246,7 @@ export function getConfiguredDefaultLocale(stringFromLocalizeCall: string): stri
 export function getConfiguredDefaultLocale(_: string): string | undefined {
 	// This returns undefined because this implementation isn't used and is overwritten by the loader
 	// when loaded.
-	return undefined;
+	return locale;
 }
 
 /**
diff --git a/src/vs/platform/assignment/common/assignmentService.ts b/src/vs/platform/assignment/common/assignmentService.ts
index 67e34826627..7c5287d6a32 100644
--- a/src/vs/platform/assignment/common/assignmentService.ts
+++ b/src/vs/platform/assignment/common/assignmentService.ts
@@ -9,7 +9,6 @@ import { IConfigurationService } from 'vs/platform/configuration/common/configur
 import { IProductService } from 'vs/platform/product/common/productService';
 import { getTelemetryLevel } from 'vs/platform/telemetry/common/telemetryUtils';
 import { AssignmentFilterProvider, ASSIGNMENT_REFETCH_INTERVAL, ASSIGNMENT_STORAGE_KEY, IAssignmentService, TargetPopulation } from 'vs/platform/assignment/common/assignment';
-import { importAMDNodeModule } from 'vs/amdX';
 
 export abstract class BaseAssignmentService implements IAssignmentService {
 	_serviceBrand: undefined;
@@ -86,7 +85,7 @@ export abstract class BaseAssignmentService implements IAssignmentService {
 		);
 
 		const tasConfig = this.productService.tasConfig!;
-		const tasClient = new (await importAMDNodeModule<typeof import('tas-client-umd')>('tas-client-umd', 'lib/tas-client-umd.js')).ExperimentationService({
+		const tasClient = new (await import('tas-client-umd')).ExperimentationService({
 			filterProviders: [filterProvider],
 			telemetry: this.telemetry,
 			storageKey: ASSIGNMENT_STORAGE_KEY,
diff --git a/src/vs/platform/environment/node/argv.ts b/src/vs/platform/environment/node/argv.ts
index 79046c7fa20..24e39697f9f 100644
--- a/src/vs/platform/environment/node/argv.ts
+++ b/src/vs/platform/environment/node/argv.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import * as minimist from 'minimist';
+import minimist from 'minimist';
 import { isWindows } from 'vs/base/common/platform';
 import { localize } from 'vs/nls';
 import { NativeParsedArgs } from 'vs/platform/environment/common/argv';
diff --git a/src/vs/platform/environment/node/argvHelper.ts b/src/vs/platform/environment/node/argvHelper.ts
index d8cefb6df67..a94fca911ea 100644
--- a/src/vs/platform/environment/node/argvHelper.ts
+++ b/src/vs/platform/environment/node/argvHelper.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import * as assert from 'assert';
+import assert from 'assert';
 import { IProcessEnvironment } from 'vs/base/common/platform';
 import { localize } from 'vs/nls';
 import { NativeParsedArgs } from 'vs/platform/environment/common/argv';
diff --git a/src/vs/platform/extensionResourceLoader/browser/extensionResourceLoaderService.ts b/src/vs/platform/extensionResourceLoader/browser/extensionResourceLoaderService.ts
index fdefc170db0..1d3bc4affc5 100644
--- a/src/vs/platform/extensionResourceLoader/browser/extensionResourceLoaderService.ts
+++ b/src/vs/platform/extensionResourceLoader/browser/extensionResourceLoaderService.ts
@@ -14,7 +14,7 @@ import { ILogService } from 'vs/platform/log/common/log';
 import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
 import { AbstractExtensionResourceLoaderService, IExtensionResourceLoaderService } from 'vs/platform/extensionResourceLoader/common/extensionResourceLoader';
 
-class ExtensionResourceLoaderService extends AbstractExtensionResourceLoaderService {
+export class ExtensionResourceLoaderService extends AbstractExtensionResourceLoaderService {
 
 	declare readonly _serviceBrand: undefined;
 
diff --git a/src/vs/platform/files/node/diskFileSystemProvider.ts b/src/vs/platform/files/node/diskFileSystemProvider.ts
index 180aa7e2960..d589be25ed6 100644
--- a/src/vs/platform/files/node/diskFileSystemProvider.ts
+++ b/src/vs/platform/files/node/diskFileSystemProvider.ts
@@ -4,7 +4,6 @@
  *--------------------------------------------------------------------------------------------*/
 
 import * as fs from 'fs';
-import { gracefulify } from 'graceful-fs';
 import { Barrier, retry } from 'vs/base/common/async';
 import { ResourceMap } from 'vs/base/common/map';
 import { VSBuffer } from 'vs/base/common/buffer';
@@ -24,22 +23,9 @@ import { readFileIntoStream } from 'vs/platform/files/common/io';
 import { AbstractNonRecursiveWatcherClient, AbstractUniversalWatcherClient, ILogMessage } from 'vs/platform/files/common/watcher';
 import { ILogService } from 'vs/platform/log/common/log';
 import { AbstractDiskFileSystemProvider, IDiskFileSystemProviderOptions } from 'vs/platform/files/common/diskFileSystemProvider';
-import { toErrorMessage } from 'vs/base/common/errorMessage';
 import { UniversalWatcherClient } from 'vs/platform/files/node/watcher/watcherClient';
 import { NodeJSWatcherClient } from 'vs/platform/files/node/watcher/nodejs/nodejsClient';
 
-/**
- * Enable graceful-fs very early from here to have it enabled
- * in all contexts that leverage the disk file system provider.
- */
-(() => {
-	try {
-		gracefulify(fs);
-	} catch (error) {
-		console.error(`Error enabling graceful-fs: ${toErrorMessage(error)}`);
-	}
-})();
-
 export class DiskFileSystemProvider extends AbstractDiskFileSystemProvider implements
 	IFileSystemProviderWithFileReadWriteCapability,
 	IFileSystemProviderWithOpenReadWriteCloseCapability,
diff --git a/src/vs/platform/instantiation/common/instantiationService.ts b/src/vs/platform/instantiation/common/instantiationService.ts
index dee82758c0a..e21e0010c97 100644
--- a/src/vs/platform/instantiation/common/instantiationService.ts
+++ b/src/vs/platform/instantiation/common/instantiationService.ts
@@ -195,8 +195,10 @@ export class InstantiationService implements IInstantiationService {
 
 				if (instanceOrDesc instanceof SyncDescriptor) {
 					const d = { id: dependency.id, desc: instanceOrDesc, _trace: item._trace.branch(dependency.id, true) };
+					if (!graph.lookup(d)) {
+						stack.push(d);
+					}
 					graph.insertEdge(item, d);
-					stack.push(d);
 				}
 			}
 		}
diff --git a/src/vs/platform/native/electron-main/nativeHostMainService.ts b/src/vs/platform/native/electron-main/nativeHostMainService.ts
index 79c912875bb..52f93d0fe74 100644
--- a/src/vs/platform/native/electron-main/nativeHostMainService.ts
+++ b/src/vs/platform/native/electron-main/nativeHostMainService.ts
@@ -489,7 +489,7 @@ export class NativeHostMainService extends Disposable implements INativeHostMain
 	async isAdmin(): Promise<boolean> {
 		let isAdmin: boolean;
 		if (isWindows) {
-			isAdmin = (await import('native-is-elevated'))();
+			isAdmin = (await import('native-is-elevated')).default();
 		} else {
 			isAdmin = process.getuid?.() === 0;
 		}
diff --git a/src/vs/platform/telemetry/common/1dsAppender.ts b/src/vs/platform/telemetry/common/1dsAppender.ts
index ccfbc3f7d9b..5fe46b464b1 100644
--- a/src/vs/platform/telemetry/common/1dsAppender.ts
+++ b/src/vs/platform/telemetry/common/1dsAppender.ts
@@ -5,7 +5,6 @@
 
 import type { IExtendedConfiguration, IExtendedTelemetryItem, ITelemetryItem, ITelemetryUnloadState } from '@microsoft/1ds-core-js';
 import type { IChannelConfiguration, IXHROverride, PostChannel } from '@microsoft/1ds-post-js';
-import { importAMDNodeModule } from 'vs/amdX';
 import { onUnexpectedError } from 'vs/base/common/errors';
 import { mixin } from 'vs/base/common/objects';
 import { ITelemetryAppender, validateTelemetryData } from 'vs/platform/telemetry/common/telemetryUtils';
@@ -22,8 +21,8 @@ const endpointUrl = 'https://mobile.events.data.microsoft.com/OneCollector/1.0';
 const endpointHealthUrl = 'https://mobile.events.data.microsoft.com/ping';
 
 async function getClient(instrumentationKey: string, addInternalFlag?: boolean, xhrOverride?: IXHROverride): Promise<IAppInsightsCore> {
-	const oneDs = await importAMDNodeModule<typeof import('@microsoft/1ds-core-js')>('@microsoft/1ds-core-js', 'dist/ms.core.js');
-	const postPlugin = await importAMDNodeModule<typeof import('@microsoft/1ds-post-js')>('@microsoft/1ds-post-js', 'dist/ms.post.js');
+	const oneDs = await import('@microsoft/1ds-core-js');
+	const postPlugin = await import('@microsoft/1ds-post-js');
 	const appInsightsCore = new oneDs.AppInsightsCore();
 	const collectorChannelPlugin: PostChannel = new postPlugin.PostChannel();
 	// Configure the app insights core to send to collector++ and disable logging of debug info
diff --git a/src/vs/platform/terminal/node/ptyService.ts b/src/vs/platform/terminal/node/ptyService.ts
index ec8182b3c1d..85de100c7c0 100644
--- a/src/vs/platform/terminal/node/ptyService.ts
+++ b/src/vs/platform/terminal/node/ptyService.ts
@@ -15,7 +15,8 @@ import { RequestStore } from 'vs/platform/terminal/common/requestStore';
 import { IProcessDataEvent, IProcessReadyEvent, IPtyService, IRawTerminalInstanceLayoutInfo, IReconnectConstants, IShellLaunchConfig, ITerminalInstanceLayoutInfoById, ITerminalLaunchError, ITerminalsLayoutInfo, ITerminalTabLayoutInfoById, TerminalIcon, IProcessProperty, TitleEventSource, ProcessPropertyType, IProcessPropertyMap, IFixedTerminalDimensions, IPersistentTerminalProcessLaunchConfig, ICrossVersionSerializedTerminalState, ISerializedTerminalState, ITerminalProcessOptions, IPtyHostLatencyMeasurement } from 'vs/platform/terminal/common/terminal';
 import { TerminalDataBufferer } from 'vs/platform/terminal/common/terminalDataBuffering';
 import { escapeNonWindowsPath } from 'vs/platform/terminal/common/terminalEnvironment';
-import { Terminal as XtermTerminal } from '@xterm/headless';
+// Fix/Hack for xterm being build as umd
+import xtermHeadless from '@xterm/headless';
 import type { ISerializeOptions, SerializeAddon as XtermSerializeAddon } from '@xterm/addon-serialize';
 import type { Unicode11Addon as XtermUnicode11Addon } from '@xterm/addon-unicode11';
 import { IGetTerminalLayoutInfoArgs, IProcessDetails, ISetTerminalLayoutInfoArgs, ITerminalTabLayoutInfoDto } from 'vs/platform/terminal/common/terminalProcess';
@@ -976,7 +977,7 @@ class MutationLogger<T> {
 }
 
 class XtermSerializer implements ITerminalSerializer {
-	private readonly _xterm: XtermTerminal;
+	private readonly _xterm: xtermHeadless.Terminal;
 	private readonly _shellIntegrationAddon: ShellIntegrationAddon;
 	private _unicodeAddon?: XtermUnicode11Addon;
 
@@ -990,7 +991,7 @@ class XtermSerializer implements ITerminalSerializer {
 		private _rawReviveBuffer: string | undefined,
 		logService: ILogService
 	) {
-		this._xterm = new XtermTerminal({
+		this._xterm = new xtermHeadless.Terminal({
 			cols,
 			rows,
 			scrollback,
diff --git a/src/vs/workbench/api/browser/mainThreadExtensionService.ts b/src/vs/workbench/api/browser/mainThreadExtensionService.ts
index 5afc945cc16..bc5fc8ed8f9 100644
--- a/src/vs/workbench/api/browser/mainThreadExtensionService.ts
+++ b/src/vs/workbench/api/browser/mainThreadExtensionService.ts
@@ -193,6 +193,13 @@ export class MainThreadExtensionService implements MainThreadExtensionServiceSha
 	async $asBrowserUri(uri: UriComponents): Promise<UriComponents> {
 		return FileAccess.uriToBrowserUri(URI.revive(uri));
 	}
+
+	async $getAllStaticBrowserUris(): Promise<[UriComponents, UriComponents][]> {
+		return Array.from(FileAccess.getRegisteredBrowserUris(), uri => [
+			uri,
+			FileAccess.uriToBrowserUri(uri)
+		]);
+	}
 }
 
 class ExtensionHostProxy implements IExtensionHostProxy {
diff --git a/src/vs/workbench/api/browser/mainThreadMessageService.ts b/src/vs/workbench/api/browser/mainThreadMessageService.ts
index 43ee94f3893..7c265cd7752 100644
--- a/src/vs/workbench/api/browser/mainThreadMessageService.ts
+++ b/src/vs/workbench/api/browser/mainThreadMessageService.ts
@@ -11,7 +11,6 @@ import { extHostNamedCustomer, IExtHostContext } from 'vs/workbench/services/ext
 import { IDialogService, IPromptButton } from 'vs/platform/dialogs/common/dialogs';
 import { INotificationService } from 'vs/platform/notification/common/notification';
 import { Event } from 'vs/base/common/event';
-import { ICommandService } from 'vs/platform/commands/common/commands';
 
 @extHostNamedCustomer(MainContext.MainThreadMessageService)
 export class MainThreadMessageService implements MainThreadMessageServiceShape {
@@ -19,7 +18,6 @@ export class MainThreadMessageService implements MainThreadMessageServiceShape {
 	constructor(
 		extHostContext: IExtHostContext,
 		@INotificationService private readonly _notificationService: INotificationService,
-		@ICommandService private readonly _commandService: ICommandService,
 		@IDialogService private readonly _dialogService: IDialogService
 	) {
 		//
@@ -64,15 +62,6 @@ export class MainThreadMessageService implements MainThreadMessageServiceShape {
 			}
 
 			const secondaryActions: IAction[] = [];
-			if (options.source) {
-				secondaryActions.push(toAction({
-					id: options.source.identifier.value,
-					label: nls.localize('manageExtension', "Manage Extension"),
-					run: () => {
-						return this._commandService.executeCommand('_extensions.manage', options.source!.identifier.value);
-					}
-				}));
-			}
 
 			const messageHandle = this._notificationService.notify({
 				severity,
diff --git a/src/vs/workbench/api/browser/statusBarExtensionPoint.ts b/src/vs/workbench/api/browser/statusBarExtensionPoint.ts
index 99dd3279fe8..b692381eaa2 100644
--- a/src/vs/workbench/api/browser/statusBarExtensionPoint.ts
+++ b/src/vs/workbench/api/browser/statusBarExtensionPoint.ts
@@ -57,7 +57,7 @@ export interface IExtensionStatusBarItemService {
 }
 
 
-class ExtensionStatusBarItemService implements IExtensionStatusBarItemService {
+export class ExtensionStatusBarItemService implements IExtensionStatusBarItemService {
 
 	declare readonly _serviceBrand: undefined;
 
diff --git a/src/vs/workbench/api/common/extHost.protocol.ts b/src/vs/workbench/api/common/extHost.protocol.ts
index 8a0b86bd78b..d0550496c00 100644
--- a/src/vs/workbench/api/common/extHost.protocol.ts
+++ b/src/vs/workbench/api/common/extHost.protocol.ts
@@ -1402,6 +1402,7 @@ export interface MainThreadExtensionServiceShape extends IDisposable {
 	$onExtensionRuntimeError(extensionId: ExtensionIdentifier, error: SerializedError): void;
 	$setPerformanceMarks(marks: performance.PerformanceMark[]): Promise<void>;
 	$asBrowserUri(uri: UriComponents): Promise<UriComponents>;
+	$getAllStaticBrowserUris(): Promise<[UriComponents, UriComponents][]>;
 }
 
 export interface SCMProviderFeatures {
diff --git a/src/vs/workbench/api/common/extHostExtensionService.ts b/src/vs/workbench/api/common/extHostExtensionService.ts
index 0f16b2d3261..8b0937afca9 100644
--- a/src/vs/workbench/api/common/extHostExtensionService.ts
+++ b/src/vs/workbench/api/common/extHostExtensionService.ts
@@ -44,7 +44,7 @@ import { Schemas } from 'vs/base/common/network';
 import { IResolveAuthorityResult } from 'vs/workbench/services/extensions/common/extensionHostProxy';
 import { IExtHostLocalizationService } from 'vs/workbench/api/common/extHostLocalizationService';
 import { StopWatch } from 'vs/base/common/stopwatch';
-import { isCI, setTimeout0 } from 'vs/base/common/platform';
+import { isWebWorker, isCI, setTimeout0 } from 'vs/base/common/platform';
 import { IExtHostManagedSockets } from 'vs/workbench/api/common/extHostManagedSockets';
 import { Dto } from 'vs/workbench/services/extensions/common/proxyIdentifier';
 
@@ -256,9 +256,11 @@ export abstract class AbstractExtHostExtensionService extends Disposable impleme
 		this._extHostTerminalService.dispose();
 		this._activator.dispose();
 
-		errors.setUnexpectedErrorHandler((err) => {
-			this._logService.error(err);
-		});
+		if (isWebWorker) {
+			errors.setUnexpectedErrorHandler((err) => {
+				this._logService.error(err);
+			});
+		}
 
 		// Invalidate all proxies
 		this._extHostContext.dispose();
diff --git a/src/vs/workbench/api/common/extensionHostMain.ts b/src/vs/workbench/api/common/extensionHostMain.ts
index 2bd275cbc21..b1c93afd65f 100644
--- a/src/vs/workbench/api/common/extensionHostMain.ts
+++ b/src/vs/workbench/api/common/extensionHostMain.ts
@@ -12,7 +12,7 @@ import { MainContext, MainThreadConsoleShape } from 'vs/workbench/api/common/ext
 import { IExtensionHostInitData } from 'vs/workbench/services/extensions/common/extensionHostProtocol';
 import { RPCProtocol } from 'vs/workbench/services/extensions/common/rpcProtocol';
 import { ExtensionIdentifier, IExtensionDescription, IRelaxedExtensionDescription } from 'vs/platform/extensions/common/extensions';
-import { ILogService } from 'vs/platform/log/common/log';
+import { ILogService, ILoggerService } from 'vs/platform/log/common/log';
 import { getSingletonServiceDescriptors } from 'vs/platform/instantiation/common/extensions';
 import { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';
 import { IExtHostInitDataService } from 'vs/workbench/api/common/extHostInitDataService';
@@ -23,6 +23,10 @@ import { IURITransformerService, URITransformerService } from 'vs/workbench/api/
 import { IExtHostExtensionService, IHostUtils } from 'vs/workbench/api/common/extHostExtensionService';
 import { IExtHostTelemetry } from 'vs/workbench/api/common/extHostTelemetry';
 import { Mutable } from 'vs/base/common/types';
+import { isWebWorker } from 'vs/base/common/platform';
+import { ExtHostLogService } from 'vs/workbench/api/common/extHostLogService';
+import { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';
+import { ExtHostLoggerService } from 'vs/workbench/api/common/extHostLoggerService';
 
 export interface IExitFn {
 	(code?: number): any;
@@ -158,10 +162,14 @@ export class ExtensionHostMain {
 		services.set(IExtHostRpcService, new ExtHostRpcService(this._rpcProtocol));
 		services.set(IURITransformerService, new URITransformerService(uriTransformer));
 		services.set(IHostUtils, hostUtils);
+		services.set(ILogService, new SyncDescriptor(ExtHostLogService, [true], true));
+		services.set(ILoggerService, new SyncDescriptor(ExtHostLoggerService, [], true));
 
 		const instaService: IInstantiationService = new InstantiationService(services, true);
 
-		instaService.invokeFunction(ErrorHandler.installEarlyHandler);
+		if (isWebWorker) {
+			instaService.invokeFunction(ErrorHandler.installEarlyHandler);
+		}
 
 		// ugly self - inject
 		this._logService = instaService.invokeFunction(accessor => accessor.get(ILogService));
@@ -180,8 +188,10 @@ export class ExtensionHostMain {
 		this._extensionService = instaService.invokeFunction(accessor => accessor.get(IExtHostExtensionService));
 		this._extensionService.initialize();
 
-		// install error handler that is extension-aware
-		instaService.invokeFunction(ErrorHandler.installFullHandler);
+		if (isWebWorker) {
+			// install error handler that is extension-aware
+			instaService.invokeFunction(ErrorHandler.installFullHandler);
+		}
 	}
 
 	async asBrowserUri(uri: URI): Promise<URI> {
@@ -189,10 +199,19 @@ export class ExtensionHostMain {
 		return URI.revive(await mainThreadExtensionsProxy.$asBrowserUri(uri));
 	}
 
+	async getAllStaticBrowserUris(): Promise<[URI, URI][]> {
+		const mainThreadExtensionsProxy = this._rpcProtocol.getProxy(MainContext.MainThreadExtensionService);
+		return (await mainThreadExtensionsProxy.$getAllStaticBrowserUris()).map(([from, to]) => [URI.revive(from), URI.revive(to)]);
+	}
+
 	terminate(reason: string): void {
 		this._extensionService.terminate(reason);
 	}
 
+	getExtHostExtensionService(): IExtHostExtensionService {
+		return this._extensionService;
+	}
+
 	private static _transform(initData: IExtensionHostInitData, rpcProtocol: RPCProtocol): IExtensionHostInitData {
 		initData.extensions.allExtensions.forEach((ext) => {
 			(<Mutable<IRelaxedExtensionDescription>>ext).extensionLocation = URI.revive(rpcProtocol.transformIncomingURIs(ext.extensionLocation));
diff --git a/src/vs/workbench/api/node/extHostExtensionService.ts b/src/vs/workbench/api/node/extHostExtensionService.ts
index 5ac0ddc7ec9..6ea024b237b 100644
--- a/src/vs/workbench/api/node/extHostExtensionService.ts
+++ b/src/vs/workbench/api/node/extHostExtensionService.ts
@@ -19,6 +19,11 @@ import { realpathSync } from 'vs/base/node/extpath';
 import { ExtHostConsoleForwarder } from 'vs/workbench/api/node/extHostConsoleForwarder';
 import { ExtHostDiskFileSystemProvider } from 'vs/workbench/api/node/extHostDiskFileSystemProvider';
 
+// ESM-uncomment-begin
+// import { createRequire } from 'node:module';
+// globalThis.require = createRequire(import.meta.url);
+// ESM-uncomment-end
+
 class NodeModuleRequireInterceptor extends RequireInterceptor {
 
 	protected _installInterceptor(): void {
@@ -109,7 +114,7 @@ export class ExtHostExtensionService extends AbstractExtHostExtensionService {
 			if (extensionId) {
 				performance.mark(`code/extHost/willLoadExtensionCode/${extensionId}`);
 			}
-			r = require.__$__nodeRequire<T>(module.fsPath);
+			r = await <T>require(module.fsPath);
 		} finally {
 			if (extensionId) {
 				performance.mark(`code/extHost/didLoadExtensionCode/${extensionId}`);
diff --git a/src/vs/workbench/api/node/extensionHostProcess.ts b/src/vs/workbench/api/node/extensionHostProcess.ts
index bb3cbfbca7b..b650ff592b1 100644
--- a/src/vs/workbench/api/node/extensionHostProcess.ts
+++ b/src/vs/workbench/api/node/extensionHostProcess.ts
@@ -5,7 +5,7 @@
 
 import * as nativeWatchdog from 'native-watchdog';
 import * as net from 'net';
-import * as minimist from 'minimist';
+import minimist from 'minimist';
 import * as performance from 'vs/base/common/performance';
 import type { MessagePortMain } from 'vs/base/parts/sandbox/node/electronTypes';
 import { isCancellationError, isSigPipeError, onUnexpectedError } from 'vs/base/common/errors';
@@ -56,24 +56,6 @@ const args = minimist(process.argv.slice(2), {
 	]
 }) as ParsedExtHostArgs;
 
-// With Electron 2.x and node.js 8.x the "natives" module
-// can cause a native crash (see https://github.com/nodejs/node/issues/19891 and
-// https://github.com/electron/electron/issues/10905). To prevent this from
-// happening we essentially blocklist this module from getting loaded in any
-// extension by patching the node require() function.
-(function () {
-	const Module = globalThis._VSCODE_NODE_MODULES.module as any;
-	const originalLoad = Module._load;
-
-	Module._load = function (request: string) {
-		if (request === 'natives') {
-			throw new Error('Either the extension or an NPM dependency is using the [unsupported "natives" node module](https://go.microsoft.com/fwlink/?linkid=871887).');
-		}
-
-		return originalLoad.apply(this, arguments);
-	};
-})();
-
 // custom process.exit logic...
 const nativeExit: IExitFn = process.exit.bind(process);
 function patchProcess(allowExit: boolean) {
diff --git a/src/vs/workbench/api/node/proxyResolver.ts b/src/vs/workbench/api/node/proxyResolver.ts
index 519924eec13..07dd94be9a2 100644
--- a/src/vs/workbench/api/node/proxyResolver.ts
+++ b/src/vs/workbench/api/node/proxyResolver.ts
@@ -78,10 +78,10 @@ export function connectProxyResolver(
 
 function createPatchedModules(params: ProxyAgentParams, resolveProxy: ReturnType<typeof createProxyResolver>) {
 	return {
-		http: Object.assign(http, createHttpPatch(params, http, resolveProxy)),
-		https: Object.assign(https, createHttpPatch(params, https, resolveProxy)),
-		net: Object.assign(net, createNetPatch(params, net)),
-		tls: Object.assign(tls, createTlsPatch(params, tls))
+		http: Object.assign({ ...http }, createHttpPatch(params, http, resolveProxy)),
+		https: Object.assign({ ...https }, createHttpPatch(params, https, resolveProxy)),
+		net: Object.assign({ ...net }, createNetPatch(params, net)),
+		tls: Object.assign({ ...tls }, createTlsPatch(params, tls))
 	};
 }
 
diff --git a/src/vs/workbench/api/worker/extHost.worker.services.ts b/src/vs/workbench/api/worker/extHost.worker.services.ts
index 20ec7e138a6..e284ed6752b 100644
--- a/src/vs/workbench/api/worker/extHost.worker.services.ts
+++ b/src/vs/workbench/api/worker/extHost.worker.services.ts
@@ -3,11 +3,8 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';
 import { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';
-import { ILogService } from 'vs/platform/log/common/log';
 import { IExtHostExtensionService } from 'vs/workbench/api/common/extHostExtensionService';
-import { ExtHostLogService } from 'vs/workbench/api/common/extHostLogService';
 import { ExtensionStoragePaths, IExtensionStoragePaths } from 'vs/workbench/api/common/extHostStoragePaths';
 import { ExtHostExtensionService } from 'vs/workbench/api/worker/extHostExtensionService';
 
@@ -17,6 +14,5 @@ import { ExtHostExtensionService } from 'vs/workbench/api/worker/extHostExtensio
 // ###                                                                   ###
 // #########################################################################
 
-registerSingleton(ILogService, new SyncDescriptor(ExtHostLogService, [true], true));
 registerSingleton(IExtHostExtensionService, ExtHostExtensionService, InstantiationType.Eager);
 registerSingleton(IExtensionStoragePaths, ExtensionStoragePaths, InstantiationType.Eager);
diff --git a/src/vs/workbench/api/worker/extHostExtensionService.ts b/src/vs/workbench/api/worker/extHostExtensionService.ts
index b83a462131d..5555f431ba0 100644
--- a/src/vs/workbench/api/worker/extHostExtensionService.ts
+++ b/src/vs/workbench/api/worker/extHostExtensionService.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { createApiFactoryAndRegisterActors } from 'vs/workbench/api/common/extHost.api.impl';
+import { IExtensionApiFactory, createApiFactoryAndRegisterActors } from 'vs/workbench/api/common/extHost.api.impl';
 import { ExtensionActivationTimesBuilder } from 'vs/workbench/api/common/extHostExtensionActivator';
 import { AbstractExtHostExtensionService } from 'vs/workbench/api/common/extHostExtensionService';
 import { URI } from 'vs/base/common/uri';
@@ -12,6 +12,7 @@ import { IExtensionDescription } from 'vs/platform/extensions/common/extensions'
 import { ExtensionRuntime } from 'vs/workbench/api/common/extHostTypes';
 import { timeout } from 'vs/base/common/async';
 import { ExtHostConsoleForwarder } from 'vs/workbench/api/worker/extHostConsoleForwarder';
+import { isWebWorker } from 'vs/base/common/platform';
 
 class WorkerRequireInterceptor extends RequireInterceptor {
 
@@ -37,14 +38,17 @@ export class ExtHostExtensionService extends AbstractExtHostExtensionService {
 	readonly extensionRuntime = ExtensionRuntime.Webworker;
 
 	private _fakeModules?: WorkerRequireInterceptor;
+	protected _apiFactory?: IExtensionApiFactory;
 
 	protected async _beforeAlmostReadyToRunExtensions(): Promise<void> {
-		// make sure console.log calls make it to the render
-		this._instaService.createInstance(ExtHostConsoleForwarder);
+		if (isWebWorker) {
+			// make sure console.log calls make it to the render
+			this._instaService.createInstance(ExtHostConsoleForwarder);
+		}
 
 		// initialize API and register actors
-		const apiFactory = this._instaService.invokeFunction(createApiFactoryAndRegisterActors);
-		this._fakeModules = this._instaService.createInstance(WorkerRequireInterceptor, apiFactory, { mine: this._myRegistry, all: this._globalRegistry });
+		this._apiFactory = this._instaService.invokeFunction(createApiFactoryAndRegisterActors);
+		this._fakeModules = this._instaService.createInstance(WorkerRequireInterceptor, this._apiFactory, { mine: this._myRegistry, all: this._globalRegistry });
 		await this._fakeModules.install();
 		performance.mark('code/extHost/didInitAPI');
 
diff --git a/src/vs/workbench/api/worker/extensionHostWorker.ts b/src/vs/workbench/api/worker/extensionHostWorker.ts
index 6e6f8845da5..f4824f99f9f 100644
--- a/src/vs/workbench/api/worker/extensionHostWorker.ts
+++ b/src/vs/workbench/api/worker/extensionHostWorker.ts
@@ -15,7 +15,6 @@ import * as performance from 'vs/base/common/performance';
 
 import 'vs/workbench/api/common/extHost.common.services';
 import 'vs/workbench/api/worker/extHost.worker.services';
-import { FileAccess } from 'vs/base/common/network';
 import { URI } from 'vs/base/common/uri';
 
 //#region --- Define, capture, and override some globals
@@ -35,6 +34,7 @@ declare namespace self {
 	let importScripts: any;
 	let fetch: _Fetch;
 	let XMLHttpRequest: any;
+	let importExt: any;
 }
 
 const nativeClose = self.close.bind(self);
@@ -47,7 +47,7 @@ function shouldTransformUri(uri: string): boolean {
 	// In principle, we could convert any URI, but we have concerns
 	// that parsing https URIs might end up decoding escape characters
 	// and result in an unintended transformation
-	return /^(file|vscode-remote):/i.test(uri);
+	return /^(file|extension-file|vscode-remote):/i.test(uri);
 }
 
 const nativeFetch = fetch.bind(self);
@@ -89,66 +89,171 @@ self.addEventListener = () => console.trace(`'addEventListener' has been blocked
 (<any>self)['webkitResolveLocalFileSystemSyncURL'] = undefined;
 (<any>self)['webkitResolveLocalFileSystemURL'] = undefined;
 
-if ((<any>self).Worker) {
-
-	// make sure new Worker(...) always uses blob: (to maintain current origin)
-	const _Worker = (<any>self).Worker;
-	Worker = <any>function (stringUrl: string | URL, options?: WorkerOptions) {
-		if (/^file:/i.test(stringUrl.toString())) {
-			stringUrl = FileAccess.uriToBrowserUri(URI.parse(stringUrl.toString())).toString(true);
-		} else if (/^vscode-remote:/i.test(stringUrl.toString())) {
-			// Supporting transformation of vscode-remote URIs requires an async call to the main thread,
-			// but we cannot do this call from within the embedded Worker, and the only way out would be
-			// to use templating instead of a function in the web api (`resourceUriProvider`)
-			throw new Error(`Creating workers from remote extensions is currently not supported.`);
-		}
+function patchWorker(asBrowserUri: (uri: URI) => Promise<URI>, getAllStaticBrowserUris: () => Promise<[URI, URI][]>) {
+	if ((<any>self).Worker) {
+
+		// make sure new Worker(...) always uses blob: (to maintain current origin)
+		const _Worker = (<any>self).Worker;
+		Worker = <any>function (stringUrl: string | URL, options?: WorkerOptions) {
+			if (/^vscode-remote:/i.test(stringUrl.toString())) {
+				// Supporting transformation of vscode-remote URIs requires an async call to the main thread,
+				// but we cannot do this call from within the embedded Worker, and the only way out would be
+				// to use templating instead of a function in the web api (`resourceUriProvider`)
+				throw new Error(`Creating workers from remote extensions is currently not supported.`);
+			}
 
-		// IMPORTANT: bootstrapFn is stringified and injected as worker blob-url. Because of that it CANNOT
-		// have dependencies on other functions or variables. Only constant values are supported. Due to
-		// that logic of FileAccess.asBrowserUri had to be copied, see `asWorkerBrowserUrl` (below).
-		const bootstrapFnSource = (function bootstrapFn(workerUrl: string) {
-			function asWorkerBrowserUrl(url: string | URL | TrustedScriptURL): any {
-				if (typeof url === 'string' || url instanceof URL) {
-					return String(url).replace(/^file:\/\//i, 'vscode-file://vscode-app');
-				}
-				return url;
+			async function getWorkerUri(workerUri: URI): Promise<string> {
+				const [browserUrl, staticBrowserUrls] = await Promise.all([
+					asBrowserUri(workerUri).then(uri => uri.toString(true)),
+					getAllStaticBrowserUris().then(bindings => Object.fromEntries(bindings.map(([from, to]) => [from.toString(true), to.toString(true)])))
+				]);
+
+				// IMPORTANT: bootstrapFn is stringified and injected as worker blob-url. Because of that it CANNOT
+				// have dependencies on other functions or variables. Only constant values are supported. Due to
+				// that logic of FileAccess.asBrowserUri had to be copied, see `asWorkerBrowserUrl` (below).
+				const bootstrapFnSource = (function bootstrapFn(workerUrl: string, staticBrowserUrls: Record<string, string>) {
+					function asWorkerBrowserUrl(url: string | URL | TrustedScriptURL): any {
+						if (typeof url === 'string' || url instanceof URL) {
+							url = String(url).replace(/^file:\/\//i, 'vscode-file://vscode-app');
+							return staticBrowserUrls[url] ?? url;
+						}
+						return url;
+					}
+
+					const nativeFetch = fetch.bind(self);
+					self.fetch = function (input, init) {
+						if (input instanceof Request) {
+							// Request object - massage not supported
+							return nativeFetch(input, init);
+						}
+						return nativeFetch(asWorkerBrowserUrl(input), init);
+					};
+					self.XMLHttpRequest = class extends XMLHttpRequest {
+						private notFound = false;
+						override open(method: string, url: string | URL, async?: boolean, username?: string | null, password?: string | null): void {
+							const transformedUrl = asWorkerBrowserUrl(url);
+							this.notFound = transformedUrl.startsWith('extension-file:');
+							return super.open(method, transformedUrl, async ?? true, username, password);
+						}
+						override send(body?: Document | XMLHttpRequestBodyInit | null | undefined): void {
+							if (this.notFound) {
+								return;
+							}
+							super.send(body);
+						}
+						override get status() {
+							return this.notFound ? 404 : super.status;
+						}
+					};
+					const nativeImportScripts = importScripts.bind(self);
+					self.importScripts = (...urls: string[]) => {
+						nativeImportScripts(...urls.map(asWorkerBrowserUrl));
+					};
+
+					self.importExt = (url: string) => {
+						// prevent bundler from trying to transform dynamic import
+						return new Function('url', 'return import(url)')(asWorkerBrowserUrl(url));
+					};
+
+					nativeImportScripts(workerUrl);
+				}).toString();
+
+				const js = `(${bootstrapFnSource}('${browserUrl}', ${JSON.stringify(staticBrowserUrls)}))`;
+
+				const blob = new Blob([js], { type: 'application/javascript' });
+				return URL.createObjectURL(blob);
 			}
 
-			const nativeFetch = fetch.bind(self);
-			self.fetch = function (input, init) {
-				if (input instanceof Request) {
-					// Request object - massage not supported
-					return nativeFetch(input, init);
+			options = options || {};
+			options.name = options.name || path.basename(stringUrl.toString());
+			class ExtensionWorker implements Worker {
+				private workerPromise: Promise<Worker>;
+				constructor(scriptURL: string | URL, options?: WorkerOptions) {
+					this.workerPromise = getWorkerUri(URI.parse(scriptURL instanceof URL ? scriptURL.toString() : scriptURL)).then(url => {
+						return new _Worker(url, options);
+					});
 				}
-				return nativeFetch(asWorkerBrowserUrl(input), init);
-			};
-			self.XMLHttpRequest = class extends XMLHttpRequest {
-				override open(method: string, url: string | URL, async?: boolean, username?: string | null, password?: string | null): void {
-					return super.open(method, asWorkerBrowserUrl(url), async ?? true, username, password);
+
+				private _onmessage: Worker['onmessage'] = null;
+				set onmessage(cb: Worker['onmessage']) {
+					this._onmessage = cb;
+					this.workerPromise.then(worker => {
+						worker.onmessage = cb;
+					}, console.error);
 				}
-			};
-			const nativeImportScripts = importScripts.bind(self);
-			self.importScripts = (...urls: string[]) => {
-				nativeImportScripts(...urls.map(asWorkerBrowserUrl));
-			};
-
-			nativeImportScripts(workerUrl);
-		}).toString();
-
-		const js = `(${bootstrapFnSource}('${stringUrl}'))`;
-		options = options || {};
-		options.name = options.name || path.basename(stringUrl.toString());
-		const blob = new Blob([js], { type: 'application/javascript' });
-		const blobUrl = URL.createObjectURL(blob);
-		return new _Worker(blobUrl, options);
-	};
 
-} else {
-	(<any>self).Worker = class extends NestedWorker {
-		constructor(stringOrUrl: string | URL, options?: WorkerOptions) {
-			super(nativePostMessage, stringOrUrl, { name: path.basename(stringOrUrl.toString()), ...options });
-		}
-	};
+				get onmessage(): Worker['onmessage'] {
+					return this._onmessage;
+				}
+
+				private _onmessageerror: Worker['onmessageerror'] = null;
+				set onmessageerror(cb: Worker['onmessageerror']) {
+					this._onmessageerror = cb;
+					this.workerPromise.then(worker => {
+						worker.onmessageerror = cb;
+					}, console.error);
+				}
+
+				get onmessageerror(): Worker['onmessageerror'] {
+					return this._onmessageerror;
+				}
+
+				private _onerror: Worker['onerror'] = null;
+				set onerror(cb: Worker['onerror']) {
+					this._onerror = cb;
+					this.workerPromise.then(worker => {
+						worker.onerror = cb;
+					}, console.error);
+				}
+
+				get onerror(): Worker['onerror'] {
+					return this._onerror;
+				}
+
+				// eslint-disable-next-line @typescript-eslint/no-explicit-any
+				postMessage(message: unknown, options?: any): void {
+					this.workerPromise.then(worker => {
+						worker.postMessage(message, options);
+					}, console.error);
+				}
+
+				terminate(): void {
+					this.workerPromise.then(worker => {
+						worker.terminate();
+					}, console.error);
+				}
+
+				// eslint-disable-next-line @typescript-eslint/no-explicit-any
+				addEventListener(type: any, listener: any, options?: any): void {
+					this.workerPromise.then(worker => {
+						worker.addEventListener(type, listener, options);
+					}, console.error);
+				}
+
+				// eslint-disable-next-line @typescript-eslint/no-explicit-any
+				removeEventListener(type: any, listener: any, options?: any): void {
+					this.workerPromise.then(worker => {
+						worker.removeEventListener(type, listener, options);
+					}, console.error);
+				}
+
+				dispatchEvent(event: Event): boolean {
+					this.workerPromise.then(worker => {
+						worker.dispatchEvent(event);
+					}, console.error);
+					return false;
+				}
+			}
+			return new ExtensionWorker(stringUrl, options);
+		};
+
+	} else {
+		(<any>self).Worker = class extends NestedWorker {
+			constructor(stringOrUrl: string | URL, options?: WorkerOptions) {
+				super(nativePostMessage, stringOrUrl, { name: path.basename(stringOrUrl.toString()), ...options });
+			}
+		};
+	}
 }
 
 //#endregion ---
@@ -255,6 +360,7 @@ export function create(): { onmessage: (message: any) => void } {
 				);
 
 				patchFetching(uri => extHostMain.asBrowserUri(uri));
+				patchWorker(uri => extHostMain.asBrowserUri(uri), () => extHostMain.getAllStaticBrowserUris());
 
 				onTerminate = (reason: string) => extHostMain.terminate(reason);
 			});
diff --git a/src/vs/workbench/browser/layout.ts b/src/vs/workbench/browser/layout.ts
index 810c53f2abf..d537a7ebe75 100644
--- a/src/vs/workbench/browser/layout.ts
+++ b/src/vs/workbench/browser/layout.ts
@@ -52,7 +52,7 @@ import { mainWindow } from 'vs/base/browser/window';
 
 //#region Layout Implementation
 
-interface ILayoutRuntimeState {
+export interface ILayoutRuntimeState {
 	activeContainerId: number;
 	fullscreen: boolean;
 	readonly maximized: Set<number>;
@@ -66,12 +66,12 @@ interface ILayoutRuntimeState {
 	};
 }
 
-interface IEditorToOpen {
+export interface IEditorToOpen {
 	readonly editor: IUntypedEditorInput;
 	readonly viewColumn?: number;
 }
 
-interface ILayoutInitializationState {
+export interface ILayoutInitializationState {
 	readonly views: {
 		readonly defaults: string[] | undefined;
 		readonly containerToRestore: {
@@ -105,11 +105,11 @@ enum LayoutClasses {
 	WINDOW_BORDER = 'border'
 }
 
-interface IPathToOpen extends IPath {
+export interface IPathToOpen extends IPath {
 	readonly viewColumn?: number;
 }
 
-interface IInitialEditorsState {
+export interface IInitialEditorsState {
 	readonly filesToOpenOrCreate?: IPathToOpen[];
 	readonly filesToDiff?: IPathToOpen[];
 	readonly filesToMerge?: IPathToOpen[];
diff --git a/src/vs/workbench/browser/parts/compositeBar.ts b/src/vs/workbench/browser/parts/compositeBar.ts
index a2007e18299..7446cfcfc5f 100644
--- a/src/vs/workbench/browser/parts/compositeBar.ts
+++ b/src/vs/workbench/browser/parts/compositeBar.ts
@@ -477,7 +477,7 @@ export class CompositeBar extends Widget implements ICompositeBar {
 				// Compute sizes only if visible. Otherwise the size measurment would be computed wrongly.
 				const currentItemsLength = compositeSwitcherBar.viewItems.length;
 				compositeSwitcherBar.push(items.map(composite => composite.activityAction));
-				items.map((composite, index) => this.compositeSizeInBar.set(composite.id, this.options.orientation === ActionsOrientation.VERTICAL
+				items.forEach((composite, index) => this.compositeSizeInBar.set(composite.id, this.options.orientation === ActionsOrientation.VERTICAL
 					? compositeSwitcherBar.getHeight(currentItemsLength + index)
 					: compositeSwitcherBar.getWidth(currentItemsLength + index)
 				));
diff --git a/src/vs/workbench/browser/parts/editor/editorGroupWatermark.ts b/src/vs/workbench/browser/parts/editor/editorGroupWatermark.ts
index 3c4ac7d594b..e942fbd2e40 100644
--- a/src/vs/workbench/browser/parts/editor/editorGroupWatermark.ts
+++ b/src/vs/workbench/browser/parts/editor/editorGroupWatermark.ts
@@ -132,7 +132,7 @@ export class EditorGroupWatermark extends Disposable {
 
 		const update = () => {
 			clearNode(box);
-			selected.map(entry => {
+			selected.forEach(entry => {
 				const keys = this.keybindingService.lookupKeybinding(entry.id);
 				if (!keys) {
 					return;
diff --git a/src/vs/workbench/browser/parts/globalCompositeBar.ts b/src/vs/workbench/browser/parts/globalCompositeBar.ts
index 13432c87811..5cd117ea3cb 100644
--- a/src/vs/workbench/browser/parts/globalCompositeBar.ts
+++ b/src/vs/workbench/browser/parts/globalCompositeBar.ts
@@ -3,55 +3,44 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { localize } from 'vs/nls';
-import { ActionBar, ActionsOrientation } from 'vs/base/browser/ui/actionbar/actionbar';
-import { ACCOUNTS_ACTIVITY_ID, GLOBAL_ACTIVITY_ID } from 'vs/workbench/common/activity';
-import { IActivity, IActivityService, NumberBadge } from 'vs/workbench/services/activity/common/activity';
-import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
-import { DisposableStore, Disposable } from 'vs/base/common/lifecycle';
-import { IColorTheme, IThemeService } from 'vs/platform/theme/common/themeService';
-import { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';
-import { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';
-import { CompoisteBarActionViewItem, CompositeBarAction, IActivityHoverOptions, ICompositeBarActionViewItemOptions, ICompositeBarColors } from 'vs/workbench/browser/parts/compositeBarActions';
-import { Codicon } from 'vs/base/common/codicons';
-import { ThemeIcon } from 'vs/base/common/themables';
-import { registerIcon } from 'vs/platform/theme/common/iconRegistry';
-import { Action, IAction, Separator, SubmenuAction, toAction } from 'vs/base/common/actions';
-import { IMenu, IMenuService, MenuId } from 'vs/platform/actions/common/actions';
-import { addDisposableListener, EventType, append, clearNode, hide, show, EventHelper, $, runWhenWindowIdle, getWindow } from 'vs/base/browser/dom';
+import { $, EventHelper, EventType, addDisposableListener, append, clearNode, getWindow, hide, show } from 'vs/base/browser/dom';
 import { StandardKeyboardEvent } from 'vs/base/browser/keyboardEvent';
 import { StandardMouseEvent } from 'vs/base/browser/mouseEvent';
-import { EventType as TouchEventType, GestureEvent } from 'vs/base/browser/touch';
+import { GestureEvent, EventType as TouchEventType } from 'vs/base/browser/touch';
+import { ActionBar, ActionsOrientation } from 'vs/base/browser/ui/actionbar/actionbar';
 import { AnchorAlignment, AnchorAxisAlignment } from 'vs/base/browser/ui/contextview/contextview';
-import { Lazy } from 'vs/base/common/lazy';
+import { Action, IAction } from 'vs/base/common/actions';
+import { Codicon } from 'vs/base/common/codicons';
+import { KeyCode } from 'vs/base/common/keyCodes';
+import { Disposable, DisposableStore } from 'vs/base/common/lifecycle';
+import { ThemeIcon } from 'vs/base/common/themables';
+import { isString } from 'vs/base/common/types';
+import { localize } from 'vs/nls';
 import { createAndFillInActionBarActions } from 'vs/platform/actions/browser/menuEntryActionViewItem';
+import { IMenu, IMenuService, MenuId } from 'vs/platform/actions/common/actions';
 import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
 import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
 import { IContextMenuService } from 'vs/platform/contextview/browser/contextView';
+import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
 import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
-import { ILogService } from 'vs/platform/log/common/log';
-import { IProductService } from 'vs/platform/product/common/productService';
-import { ISecretStorageService } from 'vs/platform/secrets/common/secrets';
-import { AuthenticationSessionInfo, getCurrentAuthenticationSessionInfo } from 'vs/workbench/services/authentication/browser/authenticationService';
-import { AuthenticationSessionAccount, IAuthenticationService } from 'vs/workbench/services/authentication/common/authentication';
+import { registerIcon } from 'vs/platform/theme/common/iconRegistry';
+import { IColorTheme, IThemeService } from 'vs/platform/theme/common/themeService';
+import { CompoisteBarActionViewItem, CompositeBarAction, IActivityHoverOptions, ICompositeBarActionViewItemOptions, ICompositeBarColors } from 'vs/workbench/browser/parts/compositeBarActions';
+import { GLOBAL_ACTIVITY_ID } from 'vs/workbench/common/activity';
+import { ACTIVITY_BAR_BADGE_BACKGROUND, ACTIVITY_BAR_BADGE_FOREGROUND } from 'vs/workbench/common/theme';
+import { IActivity, IActivityService, NumberBadge } from 'vs/workbench/services/activity/common/activity';
 import { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';
 import { IHoverService } from 'vs/workbench/services/hover/browser/hover';
-import { ILifecycleService, LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';
 import { IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';
 import { DEFAULT_ICON } from 'vs/workbench/services/userDataProfile/common/userDataProfileIcons';
-import { isString } from 'vs/base/common/types';
-import { KeyCode } from 'vs/base/common/keyCodes';
-import { ACTIVITY_BAR_BADGE_BACKGROUND, ACTIVITY_BAR_BADGE_FOREGROUND } from 'vs/workbench/common/theme';
 
 export class GlobalCompositeBar extends Disposable {
 
-	private static readonly ACCOUNTS_ACTION_INDEX = 0;
 	static readonly ACCOUNTS_ICON = registerIcon('accounts-view-bar-icon', Codicon.account, localize('accountsViewBarIcon', "Accounts icon in the view bar."));
 
 	readonly element: HTMLElement;
 
 	private readonly globalActivityAction = this._register(new Action(GLOBAL_ACTIVITY_ID));
-	private readonly accountAction = this._register(new Action(ACCOUNTS_ACTIVITY_ID));
 	private readonly globalActivityActionBar: ActionBar;
 
 	constructor(
@@ -59,9 +48,7 @@ export class GlobalCompositeBar extends Disposable {
 		private readonly colors: (theme: IColorTheme) => ICompositeBarColors,
 		private readonly activityHoverOptions: IActivityHoverOptions,
 		@IConfigurationService configurationService: IConfigurationService,
-		@IInstantiationService private readonly instantiationService: IInstantiationService,
-		@IStorageService private readonly storageService: IStorageService,
-		@IExtensionService private readonly extensionService: IExtensionService,
+		@IInstantiationService private readonly instantiationService: IInstantiationService
 	) {
 		super();
 
@@ -74,23 +61,6 @@ export class GlobalCompositeBar extends Disposable {
 					return this.instantiationService.createInstance(GlobalActivityActionViewItem, this.contextMenuActionsProvider, { colors: this.colors, hoverOptions: this.activityHoverOptions }, anchorAlignment, anchorAxisAlignment);
 				}
 
-				if (action.id === ACCOUNTS_ACTIVITY_ID) {
-					return this.instantiationService.createInstance(AccountsActivityActionViewItem,
-						this.contextMenuActionsProvider,
-						{
-							colors: this.colors,
-							hoverOptions: this.activityHoverOptions
-						},
-						anchorAlignment,
-						anchorAxisAlignment,
-						(actions: IAction[]) => {
-							actions.unshift(...[
-								toAction({ id: 'hideAccounts', label: localize('hideAccounts', "Hide Accounts"), run: () => this.storageService.store(AccountsActivityActionViewItem.ACCOUNTS_VISIBILITY_PREFERENCE_KEY, false, StorageScope.PROFILE, StorageTarget.USER) }),
-								new Separator()
-							]);
-						});
-				}
-
 				throw new Error(`No view item for action '${action.id}'`);
 			},
 			orientation: ActionsOrientation.VERTICAL,
@@ -99,21 +69,7 @@ export class GlobalCompositeBar extends Disposable {
 			preventLoopNavigation: true
 		}));
 
-		if (this.accountsVisibilityPreference) {
-			this.globalActivityActionBar.push(this.accountAction, { index: GlobalCompositeBar.ACCOUNTS_ACTION_INDEX });
-		}
-
 		this.globalActivityActionBar.push(this.globalActivityAction);
-
-		this.registerListeners();
-	}
-
-	private registerListeners(): void {
-		this.extensionService.whenInstalledExtensionsRegistered().then(() => {
-			if (!this._store.isDisposed) {
-				this._register(this.storageService.onDidChangeValue(StorageScope.PROFILE, AccountsActivityActionViewItem.ACCOUNTS_VISIBILITY_PREFERENCE_KEY, this._store)(() => this.toggleAccountsActivity()));
-			}
-		});
 	}
 
 	create(parent: HTMLElement): void {
@@ -129,26 +85,7 @@ export class GlobalCompositeBar extends Disposable {
 	}
 
 	getContextMenuActions(): IAction[] {
-		return [toAction({ id: 'toggleAccountsVisibility', label: localize('accounts', "Accounts"), checked: this.accountsVisibilityPreference, run: () => this.accountsVisibilityPreference = !this.accountsVisibilityPreference })];
-	}
-
-	private toggleAccountsActivity() {
-		if (this.globalActivityActionBar.length() === 2 && this.accountsVisibilityPreference) {
-			return;
-		}
-		if (this.globalActivityActionBar.length() === 2) {
-			this.globalActivityActionBar.pull(GlobalCompositeBar.ACCOUNTS_ACTION_INDEX);
-		} else {
-			this.globalActivityActionBar.push(this.accountAction, { index: GlobalCompositeBar.ACCOUNTS_ACTION_INDEX });
-		}
-	}
-
-	private get accountsVisibilityPreference(): boolean {
-		return this.storageService.getBoolean(AccountsActivityActionViewItem.ACCOUNTS_VISIBILITY_PREFERENCE_KEY, StorageScope.PROFILE, true);
-	}
-
-	private set accountsVisibilityPreference(value: boolean) {
-		this.storageService.store(AccountsActivityActionViewItem.ACCOUNTS_VISIBILITY_PREFERENCE_KEY, value, StorageScope.PROFILE, StorageTarget.USER);
+		return [];
 	}
 }
 
@@ -277,255 +214,6 @@ abstract class AbstractGlobalActivityActionViewItem extends CompoisteBarActionVi
 	}
 }
 
-export class AccountsActivityActionViewItem extends AbstractGlobalActivityActionViewItem {
-
-	static readonly ACCOUNTS_VISIBILITY_PREFERENCE_KEY = 'workbench.activity.showAccounts';
-
-	private readonly groupedAccounts: Map<string, (AuthenticationSessionAccount & { canSignOut: boolean })[]> = new Map();
-	private readonly problematicProviders: Set<string> = new Set();
-
-	private initialized = false;
-	private sessionFromEmbedder = new Lazy<Promise<AuthenticationSessionInfo | undefined>>(() => getCurrentAuthenticationSessionInfo(this.secretStorageService, this.productService));
-
-	constructor(
-		contextMenuActionsProvider: () => IAction[],
-		options: ICompositeBarActionViewItemOptions,
-		anchorAlignment: AnchorAlignment | undefined,
-		anchorAxisAlignment: AnchorAxisAlignment | undefined,
-		private readonly fillContextMenuActions: (actions: IAction[]) => void,
-		@IThemeService themeService: IThemeService,
-		@ILifecycleService private readonly lifecycleService: ILifecycleService,
-		@IHoverService hoverService: IHoverService,
-		@IContextMenuService contextMenuService: IContextMenuService,
-		@IMenuService menuService: IMenuService,
-		@IContextKeyService contextKeyService: IContextKeyService,
-		@IAuthenticationService private readonly authenticationService: IAuthenticationService,
-		@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,
-		@IProductService private readonly productService: IProductService,
-		@IConfigurationService configurationService: IConfigurationService,
-		@IKeybindingService keybindingService: IKeybindingService,
-		@ISecretStorageService private readonly secretStorageService: ISecretStorageService,
-		@ILogService private readonly logService: ILogService,
-		@IActivityService activityService: IActivityService,
-		@IInstantiationService instantiationService: IInstantiationService,
-	) {
-		const action = instantiationService.createInstance(CompositeBarAction, {
-			id: ACCOUNTS_ACTIVITY_ID,
-			name: localize('accounts', "Accounts"),
-			classNames: ThemeIcon.asClassNameArray(GlobalCompositeBar.ACCOUNTS_ICON)
-		});
-		super(MenuId.AccountsContext, action, options, contextMenuActionsProvider, anchorAlignment, anchorAxisAlignment, themeService, hoverService, menuService, contextMenuService, contextKeyService, configurationService, keybindingService, activityService);
-		this._register(action);
-		this.registerListeners();
-		this.initialize();
-	}
-
-	private registerListeners(): void {
-		this._register(this.authenticationService.onDidRegisterAuthenticationProvider(async (e) => {
-			await this.addAccountsFromProvider(e.id);
-		}));
-
-		this._register(this.authenticationService.onDidUnregisterAuthenticationProvider((e) => {
-			this.groupedAccounts.delete(e.id);
-			this.problematicProviders.delete(e.id);
-		}));
-
-		this._register(this.authenticationService.onDidChangeSessions(async e => {
-			for (const changed of [...e.event.changed, ...e.event.added]) {
-				try {
-					await this.addOrUpdateAccount(e.providerId, changed.account);
-				} catch (e) {
-					this.logService.error(e);
-				}
-			}
-			for (const removed of e.event.removed) {
-				this.removeAccount(e.providerId, removed.account);
-			}
-		}));
-	}
-
-	// This function exists to ensure that the accounts are added for auth providers that had already been registered
-	// before the menu was created.
-	private async initialize(): Promise<void> {
-		// Resolving the menu doesn't need to happen immediately, so we can wait until after the workbench has been restored
-		// and only run this when the system is idle.
-		await this.lifecycleService.when(LifecyclePhase.Restored);
-		if (this._store.isDisposed) {
-			return;
-		}
-		const disposable = this._register(runWhenWindowIdle(getWindow(this.element), async () => {
-			await this.doInitialize();
-			disposable.dispose();
-		}));
-	}
-
-	private async doInitialize(): Promise<void> {
-		const providerIds = this.authenticationService.getProviderIds();
-		const results = await Promise.allSettled(providerIds.map(providerId => this.addAccountsFromProvider(providerId)));
-
-		// Log any errors that occurred while initializing. We try to be best effort here to show the most amount of accounts
-		for (const result of results) {
-			if (result.status === 'rejected') {
-				this.logService.error(result.reason);
-			}
-		}
-
-		this.initialized = true;
-	}
-
-	//#region overrides
-
-	protected override async resolveMainMenuActions(accountsMenu: IMenu, disposables: DisposableStore): Promise<IAction[]> {
-		await super.resolveMainMenuActions(accountsMenu, disposables);
-
-		const providers = this.authenticationService.getProviderIds();
-		const otherCommands = accountsMenu.getActions();
-		let menus: IAction[] = [];
-
-		for (const providerId of providers) {
-			if (!this.initialized) {
-				const noAccountsAvailableAction = disposables.add(new Action('noAccountsAvailable', localize('loading', "Loading..."), undefined, false));
-				menus.push(noAccountsAvailableAction);
-				break;
-			}
-			const providerLabel = this.authenticationService.getLabel(providerId);
-			const accounts = this.groupedAccounts.get(providerId);
-			if (!accounts) {
-				if (this.problematicProviders.has(providerId)) {
-					const providerUnavailableAction = disposables.add(new Action('providerUnavailable', localize('authProviderUnavailable', '{0} is currently unavailable', providerLabel), undefined, false));
-					menus.push(providerUnavailableAction);
-					// try again in the background so that if the failure was intermittent, we can resolve it on the next showing of the menu
-					try {
-						await this.addAccountsFromProvider(providerId);
-					} catch (e) {
-						this.logService.error(e);
-					}
-				}
-				continue;
-			}
-
-			for (const account of accounts) {
-				const manageExtensionsAction = disposables.add(new Action(`configureSessions${account.label}`, localize('manageTrustedExtensions', "Manage Trusted Extensions"), undefined, true, () => {
-					return this.authenticationService.manageTrustedExtensionsForAccount(providerId, account.label);
-				}));
-
-				const providerSubMenuActions: Action[] = [manageExtensionsAction];
-
-				if (account.canSignOut) {
-					const signOutAction = disposables.add(new Action('signOut', localize('signOut', "Sign Out"), undefined, true, async () => {
-						const allSessions = await this.authenticationService.getSessions(providerId);
-						const sessionsForAccount = allSessions.filter(s => s.account.label === account.label);
-						return await this.authenticationService.removeAccountSessions(providerId, account.label, sessionsForAccount);
-					}));
-					providerSubMenuActions.push(signOutAction);
-				}
-
-				const providerSubMenu = new SubmenuAction('activitybar.submenu', `${account.label} (${providerLabel})`, providerSubMenuActions);
-				menus.push(providerSubMenu);
-			}
-		}
-
-		if (providers.length && !menus.length) {
-			const noAccountsAvailableAction = disposables.add(new Action('noAccountsAvailable', localize('noAccounts', "You are not signed in to any accounts"), undefined, false));
-			menus.push(noAccountsAvailableAction);
-		}
-
-		if (menus.length && otherCommands.length) {
-			menus.push(new Separator());
-		}
-
-		otherCommands.forEach((group, i) => {
-			const actions = group[1];
-			menus = menus.concat(actions);
-			if (i !== otherCommands.length - 1) {
-				menus.push(new Separator());
-			}
-		});
-
-		return menus;
-	}
-
-	protected override async resolveContextMenuActions(disposables: DisposableStore): Promise<IAction[]> {
-		const actions = await super.resolveContextMenuActions(disposables);
-		this.fillContextMenuActions(actions);
-		return actions;
-	}
-
-	//#endregion
-
-	//#region groupedAccounts helpers
-
-	private async addOrUpdateAccount(providerId: string, account: AuthenticationSessionAccount): Promise<void> {
-		let accounts = this.groupedAccounts.get(providerId);
-		if (!accounts) {
-			accounts = [];
-			this.groupedAccounts.set(providerId, accounts);
-		}
-
-		const sessionFromEmbedder = await this.sessionFromEmbedder.value;
-		let canSignOut = true;
-		if (
-			sessionFromEmbedder												// if we have a session from the embedder
-			&& !sessionFromEmbedder.canSignOut								// and that session says we can't sign out
-			&& (await this.authenticationService.getSessions(providerId))	// and that session is associated with the account we are adding/updating
-				.some(s =>
-					s.id === sessionFromEmbedder.id
-					&& s.account.id === account.id
-				)
-		) {
-			canSignOut = false;
-		}
-
-		const existingAccount = accounts.find(a => a.label === account.label);
-		if (existingAccount) {
-			// if we have an existing account and we discover that we
-			// can't sign out of it, update the account to mark it as "can't sign out"
-			if (!canSignOut) {
-				existingAccount.canSignOut = canSignOut;
-			}
-		} else {
-			accounts.push({ ...account, canSignOut });
-		}
-	}
-
-	private removeAccount(providerId: string, account: AuthenticationSessionAccount): void {
-		const accounts = this.groupedAccounts.get(providerId);
-		if (!accounts) {
-			return;
-		}
-
-		const index = accounts.findIndex(a => a.id === account.id);
-		if (index === -1) {
-			return;
-		}
-
-		accounts.splice(index, 1);
-		if (accounts.length === 0) {
-			this.groupedAccounts.delete(providerId);
-		}
-	}
-
-	private async addAccountsFromProvider(providerId: string): Promise<void> {
-		try {
-			const sessions = await this.authenticationService.getSessions(providerId);
-			this.problematicProviders.delete(providerId);
-
-			for (const session of sessions) {
-				try {
-					await this.addOrUpdateAccount(providerId, session.account);
-				} catch (e) {
-					this.logService.error(e);
-				}
-			}
-		} catch (e) {
-			this.logService.error(e);
-			this.problematicProviders.add(providerId);
-		}
-	}
-
-	//#endregion
-}
-
 export class GlobalActivityActionViewItem extends AbstractGlobalActivityActionViewItem {
 
 	private profileBadge: HTMLElement | undefined;
@@ -606,37 +294,6 @@ export class GlobalActivityActionViewItem extends AbstractGlobalActivityActionVi
 	}
 }
 
-export class SimpleAccountActivityActionViewItem extends AccountsActivityActionViewItem {
-
-	constructor(
-		hoverOptions: IActivityHoverOptions,
-		@IThemeService themeService: IThemeService,
-		@ILifecycleService lifecycleService: ILifecycleService,
-		@IHoverService hoverService: IHoverService,
-		@IContextMenuService contextMenuService: IContextMenuService,
-		@IMenuService menuService: IMenuService,
-		@IContextKeyService contextKeyService: IContextKeyService,
-		@IAuthenticationService authenticationService: IAuthenticationService,
-		@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,
-		@IProductService productService: IProductService,
-		@IConfigurationService configurationService: IConfigurationService,
-		@IKeybindingService keybindingService: IKeybindingService,
-		@ISecretStorageService secretStorageService: ISecretStorageService,
-		@ILogService logService: ILogService,
-		@IActivityService activityService: IActivityService,
-		@IInstantiationService instantiationService: IInstantiationService
-	) {
-		super(() => [], {
-			colors: theme => ({
-				badgeBackground: theme.getColor(ACTIVITY_BAR_BADGE_BACKGROUND),
-				badgeForeground: theme.getColor(ACTIVITY_BAR_BADGE_FOREGROUND),
-			}),
-			hoverOptions,
-			compact: true,
-		}, undefined, undefined, actions => actions, themeService, lifecycleService, hoverService, contextMenuService, menuService, contextKeyService, authenticationService, environmentService, productService, configurationService, keybindingService, secretStorageService, logService, activityService, instantiationService);
-	}
-}
-
 export class SimpleGlobalActivityActionViewItem extends GlobalActivityActionViewItem {
 
 	constructor(
diff --git a/src/vs/workbench/browser/parts/titlebar/titlebarPart.ts b/src/vs/workbench/browser/parts/titlebar/titlebarPart.ts
index b75723961d2..21c5d998397 100644
--- a/src/vs/workbench/browser/parts/titlebar/titlebarPart.ts
+++ b/src/vs/workbench/browser/parts/titlebar/titlebarPart.ts
@@ -38,7 +38,7 @@ import { IHoverService } from 'vs/workbench/services/hover/browser/hover';
 import { Categories } from 'vs/platform/action/common/actionCommonCategories';
 import { WorkbenchToolBar } from 'vs/platform/actions/browser/toolbar';
 import { ACCOUNTS_ACTIVITY_ID, GLOBAL_ACTIVITY_ID } from 'vs/workbench/common/activity';
-import { SimpleAccountActivityActionViewItem, SimpleGlobalActivityActionViewItem } from 'vs/workbench/browser/parts/globalCompositeBar';
+import { SimpleGlobalActivityActionViewItem } from 'vs/workbench/browser/parts/globalCompositeBar';
 import { HoverPosition } from 'vs/base/browser/ui/hover/hoverWidget';
 import { IEditorGroupsContainer, IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';
 import { ActionRunner, IAction } from 'vs/base/common/actions';
@@ -495,9 +495,6 @@ export class BrowserTitlebarPart extends Part implements ITitlebarPart {
 			if (action.id === GLOBAL_ACTIVITY_ID) {
 				return this.instantiationService.createInstance(SimpleGlobalActivityActionViewItem, { position: () => HoverPosition.BELOW });
 			}
-			if (action.id === ACCOUNTS_ACTIVITY_ID) {
-				return this.instantiationService.createInstance(SimpleAccountActivityActionViewItem, { position: () => HoverPosition.BELOW });
-			}
 		}
 
 		// --- Editor Actions
diff --git a/src/vs/workbench/browser/parts/views/viewPaneContainer.ts b/src/vs/workbench/browser/parts/views/viewPaneContainer.ts
index 2be6d0ca33b..5da440cf5b5 100644
--- a/src/vs/workbench/browser/parts/views/viewPaneContainer.ts
+++ b/src/vs/workbench/browser/parts/views/viewPaneContainer.ts
@@ -680,7 +680,7 @@ export class ViewPaneContainer extends Component implements IViewPaneContainer {
 		}
 
 		this.panes.filter(view => view.isVisible() !== visible)
-			.map((view) => view.setVisible(visible));
+			.forEach((view) => view.setVisible(visible));
 	}
 
 	isVisible(): boolean {
diff --git a/src/vs/workbench/common/views.ts b/src/vs/workbench/common/views.ts
index 9c886825943..116cc28ed20 100644
--- a/src/vs/workbench/common/views.ts
+++ b/src/vs/workbench/common/views.ts
@@ -253,7 +253,10 @@ class ViewContainersRegistryImpl extends Disposable implements IViewContainersRe
 	}
 
 	getDefaultViewContainer(location: ViewContainerLocation): ViewContainer | undefined {
-		return this.defaultViewContainers.find(viewContainer => this.getViewContainerLocation(viewContainer) === location);
+		const locationViewContainers = this.defaultViewContainers.filter(viewContainer => this.getViewContainerLocation(viewContainer) === location);
+
+		locationViewContainers.sort((a, b) => (a.order ?? 0) - (b.order ?? 0));
+		return locationViewContainers[0];
 	}
 }
 
diff --git a/src/vs/workbench/contrib/debug/browser/extensionHostDebugService.ts b/src/vs/workbench/contrib/debug/browser/extensionHostDebugService.ts
index 08449bd2cd7..f82ac191725 100644
--- a/src/vs/workbench/contrib/debug/browser/extensionHostDebugService.ts
+++ b/src/vs/workbench/contrib/debug/browser/extensionHostDebugService.ts
@@ -19,7 +19,7 @@ import { IBrowserWorkbenchEnvironmentService } from 'vs/workbench/services/envir
 import { IHostService } from 'vs/workbench/services/host/browser/host';
 import { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';
 
-class BrowserExtensionHostDebugService extends ExtensionHostDebugChannelClient implements IExtensionHostDebugService {
+export class BrowserExtensionHostDebugService extends ExtensionHostDebugChannelClient implements IExtensionHostDebugService {
 
 	private static readonly LAST_EXTENSION_DEVELOPMENT_WORKSPACE_KEY = 'debug.lastExtensionDevelopmentWorkspace';
 
diff --git a/src/vs/workbench/contrib/extensions/browser/abstractRuntimeExtensionsEditor.ts b/src/vs/workbench/contrib/extensions/browser/abstractRuntimeExtensionsEditor.ts
index 295c3fd59cb..d3aa77446b4 100644
--- a/src/vs/workbench/contrib/extensions/browser/abstractRuntimeExtensionsEditor.ts
+++ b/src/vs/workbench/contrib/extensions/browser/abstractRuntimeExtensionsEditor.ts
@@ -35,7 +35,7 @@ import { IExtension, IExtensionsWorkbenchService } from 'vs/workbench/contrib/ex
 import { RuntimeExtensionsInput } from 'vs/workbench/contrib/extensions/common/runtimeExtensionsInput';
 import { IEditorService } from 'vs/workbench/services/editor/common/editorService';
 import { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';
-import { DefaultIconPath, EnablementState } from 'vs/workbench/services/extensionManagement/common/extensionManagement';
+import { getDefaultIconPath, EnablementState } from 'vs/workbench/services/extensionManagement/common/extensionManagement';
 import { LocalWebWorkerRunningLocation } from 'vs/workbench/services/extensions/common/extensionRunningLocation';
 import { IExtensionHostProfile, IExtensionService, IExtensionsStatus } from 'vs/workbench/services/extensions/common/extensions';
 
@@ -266,8 +266,8 @@ export abstract class AbstractRuntimeExtensionsEditor extends EditorPane {
 
 				data.root.classList.toggle('odd', index % 2 === 1);
 
-				data.elementDisposables.push(addDisposableListener(data.icon, 'error', () => data.icon.src = element.marketplaceInfo?.iconUrlFallback || DefaultIconPath, { once: true }));
-				data.icon.src = element.marketplaceInfo?.iconUrl || DefaultIconPath;
+				data.elementDisposables.push(addDisposableListener(data.icon, 'error', () => data.icon.src = element.marketplaceInfo?.iconUrlFallback || getDefaultIconPath(), { once: true }));
+				data.icon.src = element.marketplaceInfo?.iconUrl || getDefaultIconPath();
 
 				if (!data.icon.complete) {
 					data.icon.style.visibility = 'hidden';
diff --git a/src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts b/src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts
index 4797dcb84c3..ff12983c3db 100644
--- a/src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts
+++ b/src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts
@@ -992,7 +992,7 @@ class ExtensionsContributions extends Disposable implements IWorkbenchContributi
 			order: 1,
 		});
 
-		EXTENSION_CATEGORIES.map((category, index) => {
+		EXTENSION_CATEGORIES.forEach((category, index) => {
 			this.registerExtensionAction({
 				id: `extensions.actions.searchByCategory.${category}`,
 				title: category,
diff --git a/src/vs/workbench/contrib/extensions/browser/extensionsWorkbenchService.ts b/src/vs/workbench/contrib/extensions/browser/extensionsWorkbenchService.ts
index 92097d03ccc..16165c90c90 100644
--- a/src/vs/workbench/contrib/extensions/browser/extensionsWorkbenchService.ts
+++ b/src/vs/workbench/contrib/extensions/browser/extensionsWorkbenchService.ts
@@ -17,7 +17,7 @@ import {
 	InstallExtensionEvent, DidUninstallExtensionEvent, InstallOperation, InstallOptions, WEB_EXTENSION_TAG, InstallExtensionResult,
 	IExtensionsControlManifest, InstallVSIXOptions, IExtensionInfo, IExtensionQueryOptions, IDeprecationInfo, isTargetPlatformCompatible, InstallExtensionInfo, EXTENSION_IDENTIFIER_REGEX
 } from 'vs/platform/extensionManagement/common/extensionManagement';
-import { IWorkbenchExtensionEnablementService, EnablementState, IExtensionManagementServerService, IExtensionManagementServer, IWorkbenchExtensionManagementService, DefaultIconPath } from 'vs/workbench/services/extensionManagement/common/extensionManagement';
+import { IWorkbenchExtensionEnablementService, EnablementState, IExtensionManagementServerService, IExtensionManagementServer, IWorkbenchExtensionManagementService, getDefaultIconPath } from 'vs/workbench/services/extensionManagement/common/extensionManagement';
 import { getGalleryExtensionTelemetryData, getLocalExtensionTelemetryData, areSameExtensions, groupByExtension, getGalleryExtensionId } from 'vs/platform/extensionManagement/common/extensionManagementUtil';
 import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
 import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
@@ -206,7 +206,7 @@ export class Extension implements IExtension {
 				}
 			}
 		}
-		return DefaultIconPath;
+		return getDefaultIconPath();
 	}
 
 	get repository(): string | undefined {
diff --git a/src/vs/workbench/contrib/search/browser/searchModel.ts b/src/vs/workbench/contrib/search/browser/searchModel.ts
index 82b4121cf6a..8b6803f2396 100644
--- a/src/vs/workbench/contrib/search/browser/searchModel.ts
+++ b/src/vs/workbench/contrib/search/browser/searchModel.ts
@@ -1608,6 +1608,7 @@ export class SearchResult extends Disposable {
 		super();
 		this._rangeHighlightDecorations = this.instantiationService.createInstance(RangeHighlightDecorations);
 
+		this.modelService.getModels().forEach(model => this.onModelAdded(model));
 		this._register(this.modelService.onModelAdded(model => this.onModelAdded(model)));
 
 		this._register(this.notebookEditorService.onDidAddNotebookEditor(widget => {
@@ -2374,7 +2375,7 @@ function textSearchResultToMatches(rawMatch: ITextSearchMatch, fileMatch: FileMa
 
 export function textSearchMatchesToNotebookMatches(textSearchMatches: ITextSearchMatch[], cell: CellMatch): MatchInNotebook[] {
 	const notebookMatches: MatchInNotebook[] = [];
-	textSearchMatches.map((textSearchMatch) => {
+	textSearchMatches.forEach((textSearchMatch) => {
 		const previewLines = textSearchMatch.preview.text.split('\n');
 		if (Array.isArray(textSearchMatch.ranges)) {
 			textSearchMatch.ranges.forEach((r, i) => {
diff --git a/src/vs/workbench/contrib/terminal/browser/terminalInstance.ts b/src/vs/workbench/contrib/terminal/browser/terminalInstance.ts
index 0988c4c0f47..8b46273facb 100644
--- a/src/vs/workbench/contrib/terminal/browser/terminalInstance.ts
+++ b/src/vs/workbench/contrib/terminal/browser/terminalInstance.ts
@@ -83,7 +83,6 @@ import { IHistoryService } from 'vs/workbench/services/history/common/history';
 import { IWorkbenchLayoutService, Position } from 'vs/workbench/services/layout/browser/layoutService';
 import { IPathService } from 'vs/workbench/services/path/common/pathService';
 import { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';
-import { importAMDNodeModule } from 'vs/amdX';
 import { ISimpleSelectedSuggestion } from 'vs/workbench/services/suggest/browser/simpleSuggestWidget';
 import type { IMarker, Terminal as XTermTerminal } from '@xterm/xterm';
 import { AccessibilityCommandId } from 'vs/workbench/contrib/accessibility/common/accessibilityCommands';
@@ -698,7 +697,7 @@ export class TerminalInstance extends Disposable implements ITerminalInstance {
 			return xtermConstructor;
 		}
 		xtermConstructor = Promises.withAsyncBody<typeof XTermTerminal>(async (resolve) => {
-			const Terminal = (await importAMDNodeModule<typeof import('@xterm/xterm')>('@xterm/xterm', 'lib/xterm.js')).Terminal;
+			const Terminal = (await import('@xterm/xterm')).Terminal;
 			// Localize strings
 			Terminal.strings.promptLabel = nls.localize('terminal.integrated.a11yPromptLabel', 'Terminal input');
 			Terminal.strings.tooMuchOutput = keybinding ? nls.localize('terminal.integrated.useAccessibleBuffer', 'Use the accessible buffer {0} to manually review output', keybinding.getLabel()) : nls.localize('terminal.integrated.useAccessibleBufferNoKb', 'Use the Terminal: Focus Accessible Buffer command to manually review output');
diff --git a/src/vs/workbench/contrib/terminal/browser/terminalService.ts b/src/vs/workbench/contrib/terminal/browser/terminalService.ts
index 98a645d83a2..2c745985798 100644
--- a/src/vs/workbench/contrib/terminal/browser/terminalService.ts
+++ b/src/vs/workbench/contrib/terminal/browser/terminalService.ts
@@ -19,7 +19,7 @@ import { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/c
 import { IDialogService } from 'vs/platform/dialogs/common/dialogs';
 import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
 import { INotificationService } from 'vs/platform/notification/common/notification';
-import { ICreateContributedTerminalProfileOptions, IExtensionTerminalProfile, IPtyHostAttachTarget, IRawTerminalInstanceLayoutInfo, IRawTerminalTabLayoutInfo, IShellLaunchConfig, ITerminalBackend, ITerminalLaunchError, ITerminalLogService, ITerminalsLayoutInfo, ITerminalsLayoutInfoById, TerminalExitReason, TerminalLocation, TerminalLocationString, TitleEventSource } from 'vs/platform/terminal/common/terminal';
+import { ICreateContributedTerminalProfileOptions, IExtensionTerminalProfile, IPtyHostAttachTarget, IRawTerminalInstanceLayoutInfo, IRawTerminalTabLayoutInfo, IShellLaunchConfig, ITerminalBackend, ITerminalBackendRegistry, ITerminalLaunchError, ITerminalLogService, ITerminalsLayoutInfo, ITerminalsLayoutInfoById, TerminalExitReason, TerminalExtensions, TerminalLocation, TerminalLocationString, TitleEventSource } from 'vs/platform/terminal/common/terminal';
 import { formatMessageForTerminal } from 'vs/platform/terminal/common/terminalStrings';
 import { iconForeground } from 'vs/platform/theme/common/colorRegistry';
 import { getIconRegistry } from 'vs/platform/theme/common/iconRegistry';
@@ -53,6 +53,7 @@ import { TerminalCapabilityStore } from 'vs/platform/terminal/common/capabilitie
 import { ITimerService } from 'vs/workbench/services/timer/browser/timerService';
 import { mark } from 'vs/base/common/performance';
 import { DetachedTerminal } from 'vs/workbench/contrib/terminal/browser/detachedTerminal';
+import { Registry } from 'vs/platform/registry/common/platform';
 import { ITerminalCapabilityImplMap, TerminalCapability } from 'vs/platform/terminal/common/capabilities/capabilities';
 import { createInstanceCapabilityEventMultiplexer } from 'vs/workbench/contrib/terminal/browser/terminalEvents';
 import { mainWindow } from 'vs/base/browser/window';
@@ -214,7 +215,7 @@ export class TerminalService extends Disposable implements ITerminalService {
 		this._handleInstanceContextKeys();
 		this._terminalShellTypeContextKey = TerminalContextKeys.shellType.bindTo(this._contextKeyService);
 		this._processSupportContextKey = TerminalContextKeys.processSupported.bindTo(this._contextKeyService);
-		this._processSupportContextKey.set(!isWeb || this._remoteAgentService.getConnection() !== null);
+		this._processSupportContextKey.set(!isWeb || this._remoteAgentService.getConnection() !== null || Registry.as<ITerminalBackendRegistry>(TerminalExtensions.Backend).getTerminalBackend() !== undefined);
 		this._terminalHasBeenCreated = TerminalContextKeys.terminalHasBeenCreated.bindTo(this._contextKeyService);
 		this._terminalCountContextKey = TerminalContextKeys.count.bindTo(this._contextKeyService);
 		this._terminalEditorActive = TerminalContextKeys.terminalEditorActive.bindTo(this._contextKeyService);
diff --git a/src/vs/workbench/contrib/terminal/browser/xterm/xtermTerminal.ts b/src/vs/workbench/contrib/terminal/browser/xterm/xtermTerminal.ts
index 767dd15ab7d..aff608f0a42 100644
--- a/src/vs/workbench/contrib/terminal/browser/xterm/xtermTerminal.ts
+++ b/src/vs/workbench/contrib/terminal/browser/xterm/xtermTerminal.ts
@@ -35,7 +35,6 @@ import { DecorationAddon } from 'vs/workbench/contrib/terminal/browser/xterm/dec
 import { ITerminalCapabilityStore, ITerminalCommand, TerminalCapability } from 'vs/platform/terminal/common/capabilities/capabilities';
 import { Emitter } from 'vs/base/common/event';
 import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
-import { importAMDNodeModule } from 'vs/amdX';
 import { SuggestAddon } from 'vs/workbench/contrib/terminal/browser/xterm/suggestAddon';
 import { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
 import { TerminalContextKeys } from 'vs/workbench/contrib/terminal/common/terminalContextKey';
@@ -771,7 +770,7 @@ export class XtermTerminal extends Disposable implements IXtermTerminal, IDetach
 
 	protected async _getCanvasAddonConstructor(): Promise<typeof CanvasAddonType> {
 		if (!CanvasAddon) {
-			CanvasAddon = (await importAMDNodeModule<typeof import('@xterm/addon-canvas')>('@xterm/addon-canvas', 'lib/xterm-addon-canvas.js')).CanvasAddon;
+			CanvasAddon = (await import('@xterm/addon-canvas')).CanvasAddon;
 		}
 		return CanvasAddon;
 	}
@@ -797,35 +796,35 @@ export class XtermTerminal extends Disposable implements IXtermTerminal, IDetach
 
 	protected async _getImageAddonConstructor(): Promise<typeof ImageAddonType> {
 		if (!ImageAddon) {
-			ImageAddon = (await importAMDNodeModule<typeof import('@xterm/addon-image')>('@xterm/addon-image', 'lib/addon-image.js')).ImageAddon;
+			ImageAddon = (await import('@xterm/addon-image')).ImageAddon;
 		}
 		return ImageAddon;
 	}
 
 	protected async _getSearchAddonConstructor(): Promise<typeof SearchAddonType> {
 		if (!SearchAddon) {
-			SearchAddon = (await importAMDNodeModule<typeof import('@xterm/addon-search')>('@xterm/addon-search', 'lib/addon-search.js')).SearchAddon;
+			SearchAddon = (await import('@xterm/addon-search')).SearchAddon;
 		}
 		return SearchAddon;
 	}
 
 	protected async _getUnicode11Constructor(): Promise<typeof Unicode11AddonType> {
 		if (!Unicode11Addon) {
-			Unicode11Addon = (await importAMDNodeModule<typeof import('@xterm/addon-unicode11')>('@xterm/addon-unicode11', 'lib/addon-unicode11.js')).Unicode11Addon;
+			Unicode11Addon = (await import('@xterm/addon-unicode11')).Unicode11Addon;
 		}
 		return Unicode11Addon;
 	}
 
 	protected async _getWebglAddonConstructor(): Promise<typeof WebglAddonType> {
 		if (!WebglAddon) {
-			WebglAddon = (await importAMDNodeModule<typeof import('@xterm/addon-webgl')>('@xterm/addon-webgl', 'lib/addon-webgl.js')).WebglAddon;
+			WebglAddon = (await import('@xterm/addon-webgl')).WebglAddon;
 		}
 		return WebglAddon;
 	}
 
 	protected async _getSerializeAddonConstructor(): Promise<typeof SerializeAddonType> {
 		if (!SerializeAddon) {
-			SerializeAddon = (await importAMDNodeModule<typeof import('@xterm/addon-serialize')>('@xterm/addon-serialize', 'lib/addon-serialize.js')).SerializeAddon;
+			SerializeAddon = (await import('@xterm/addon-serialize')).SerializeAddon;
 		}
 		return SerializeAddon;
 	}
diff --git a/src/vs/workbench/contrib/terminalContrib/stickyScroll/browser/terminalStickyScrollOverlay.ts b/src/vs/workbench/contrib/terminalContrib/stickyScroll/browser/terminalStickyScrollOverlay.ts
index b60f155a14a..09ce9a928fe 100644
--- a/src/vs/workbench/contrib/terminalContrib/stickyScroll/browser/terminalStickyScrollOverlay.ts
+++ b/src/vs/workbench/contrib/terminalContrib/stickyScroll/browser/terminalStickyScrollOverlay.ts
@@ -5,7 +5,6 @@
 import type { CanvasAddon as CanvasAddonType } from '@xterm/addon-canvas';
 import type { SerializeAddon as SerializeAddonType } from '@xterm/addon-serialize';
 import type { IBufferLine, IMarker, ITerminalOptions, ITheme, Terminal as RawXtermTerminal, Terminal as XTermTerminal } from '@xterm/xterm';
-import { importAMDNodeModule } from 'vs/amdX';
 import { $, addDisposableListener, addStandardDisposableListener, getWindow } from 'vs/base/browser/dom';
 import { CancelablePromise, createCancelablePromise } from 'vs/base/common/async';
 import { debounce, memoize, throttle } from 'vs/base/common/decorators';
@@ -457,13 +456,13 @@ export class TerminalStickyScrollOverlay extends Disposable {
 
 	@memoize
 	private async _getCanvasAddonConstructor(): Promise<typeof CanvasAddonType> {
-		const m = await importAMDNodeModule<typeof import('@xterm/addon-canvas')>('@xterm/addon-canvas', 'lib/xterm-addon-canvas.js');
+		const m = await import('@xterm/addon-canvas');
 		return m.CanvasAddon;
 	}
 
 	@memoize
 	private async _getSerializeAddonConstructor(): Promise<typeof SerializeAddonType> {
-		const m = await importAMDNodeModule<typeof import('@xterm/addon-serialize')>('@xterm/addon-serialize', 'lib/addon-serialize.js');
+		const m = await import('@xterm/addon-serialize');
 		return m.SerializeAddon;
 	}
 }
diff --git a/src/vs/workbench/contrib/webview/browser/pre/service-worker.js b/src/vs/workbench/contrib/webview/browser/pre/service-worker.js
index a6e9943b866..c470a1c9ed5 100644
--- a/src/vs/workbench/contrib/webview/browser/pre/service-worker.js
+++ b/src/vs/workbench/contrib/webview/browser/pre/service-worker.js
@@ -452,7 +452,6 @@ async function getOuterIframeClient(webviewId) {
 	const allClients = await sw.clients.matchAll({ includeUncontrolled: true });
 	return allClients.filter(client => {
 		const clientUrl = new URL(client.url);
-		const hasExpectedPathName = (clientUrl.pathname === `${rootPath}/` || clientUrl.pathname === `${rootPath}/index.html` || clientUrl.pathname === `${rootPath}/index-no-csp.html`);
-		return hasExpectedPathName && clientUrl.searchParams.get('id') === webviewId;
+		return clientUrl.searchParams.get('id') === webviewId;
 	});
 }
diff --git a/src/vs/workbench/contrib/webview/browser/webviewElement.ts b/src/vs/workbench/contrib/webview/browser/webviewElement.ts
index b442277e920..481ab494561 100644
--- a/src/vs/workbench/contrib/webview/browser/webviewElement.ts
+++ b/src/vs/workbench/contrib/webview/browser/webviewElement.ts
@@ -11,7 +11,7 @@ import { streamToBuffer, VSBufferReadableStream } from 'vs/base/common/buffer';
 import { CancellationTokenSource } from 'vs/base/common/cancellation';
 import { Emitter, Event } from 'vs/base/common/event';
 import { Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';
-import { COI } from 'vs/base/common/network';
+import { COI, FileAccess } from 'vs/base/common/network';
 import { URI } from 'vs/base/common/uri';
 import { generateUuid } from 'vs/base/common/uuid';
 import { localize } from 'vs/nls';
@@ -186,11 +186,6 @@ export class WebviewElement extends Disposable implements IWebview, WebviewFindD
 				return;
 			}
 
-			if (e.origin !== this._webviewContentOrigin(this._encodedWebviewOrigin)) {
-				console.log(`Skipped renderer receiving message due to mismatched origins: ${e.origin} ${this._webviewContentOrigin}`);
-				return;
-			}
-
 			if (e.data.channel === 'webview-ready') {
 				if (this._messagePort) {
 					return;
@@ -477,6 +472,9 @@ export class WebviewElement extends Disposable implements IWebview, WebviewFindD
 			params.purpose = options.purpose;
 		}
 
+		params.serviceWorkerUri = FileAccess.asBrowserUri('vs/workbench/contrib/webview/browser/pre/service-worker.js').toString(true);
+		params.fakeHtmlUri = FileAccess.asBrowserUri('vs/workbench/contrib/webview/browser/pre/fake.html').toString(true);
+
 		COI.addSearchParam(params, true, true);
 
 		const queryString = new URLSearchParams(params).toString();
@@ -484,7 +482,8 @@ export class WebviewElement extends Disposable implements IWebview, WebviewFindD
 		// Workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=1754872
 		const fileName = isFirefox ? 'index-no-csp.html' : 'index.html';
 
-		this.element!.setAttribute('src', `${this.webviewContentEndpoint(encodedWebviewOrigin)}/${fileName}?${queryString}`);
+		const relativeIframeSrc = FileAccess.asBrowserUri(`vs/workbench/contrib/webview/browser/pre/${fileName}`);
+		this.element!.setAttribute('src', `${relativeIframeSrc.toString(true)}?${queryString}`);
 	}
 
 	public mountTo(element: HTMLElement) {
@@ -538,11 +537,6 @@ export class WebviewElement extends Disposable implements IWebview, WebviewFindD
 		return endpoint;
 	}
 
-	private _webviewContentOrigin(encodedWebviewOrigin: string): string {
-		const uri = URI.parse(this.webviewContentEndpoint(encodedWebviewOrigin));
-		return uri.scheme + '://' + uri.authority.toLowerCase();
-	}
-
 	private doPostMessage(channel: string, data?: any, transferable: Transferable[] = []): boolean {
 		if (this.element && this._messagePort) {
 			this._messagePort.postMessage({ channel, args: data }, transferable);
diff --git a/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedDetailsRenderer.ts b/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedDetailsRenderer.ts
index 869f44526b4..296ac140860 100644
--- a/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedDetailsRenderer.ts
+++ b/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedDetailsRenderer.ts
@@ -17,6 +17,7 @@ import { IFileService } from 'vs/platform/files/common/files';
 import { INotificationService } from 'vs/platform/notification/common/notification';
 import { ILanguageService } from 'vs/editor/common/languages/language';
 import { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';
+import { AppResourcePath, FileAccess } from 'vs/base/common/network';
 
 
 export class GettingStartedDetailsRenderer {
@@ -221,12 +222,9 @@ export class GettingStartedDetailsRenderer {
 		try {
 			const moduleId = JSON.parse(path.query).moduleId;
 			if (useModuleId && moduleId) {
-				const contents = await new Promise<string>(c => {
-					require([moduleId], content => {
-						c(content.default());
-					});
-				});
-				return contents;
+				const content = await FileAccess.toModuleContent<() => Promise<string>>(moduleId);
+
+				return content();
 			}
 		} catch { }
 
@@ -262,7 +260,7 @@ export class GettingStartedDetailsRenderer {
 }
 
 const transformUri = (src: string, base: URI) => {
-	const path = joinPath(base, src);
+	const path = FileAccess.asBrowserUri(joinPath(base, src).fsPath.slice(1) as AppResourcePath);
 	return asWebviewUri(path).toString(true);
 };
 
diff --git a/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedService.ts b/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedService.ts
index f0c08e1b826..e63f4724028 100644
--- a/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedService.ts
+++ b/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedService.ts
@@ -33,7 +33,7 @@ import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
 import { checkGlobFileExists } from 'vs/workbench/services/extensions/common/workspaceContains';
 import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
 import { CancellationTokenSource } from 'vs/base/common/cancellation';
-import { DefaultIconPath } from 'vs/workbench/services/extensionManagement/common/extensionManagement';
+import { getDefaultIconPath } from 'vs/workbench/services/extensionManagement/common/extensionManagement';
 
 export const HasMultipleNewFileEntries = new RawContextKey<boolean>('hasMultipleNewFileEntries', false);
 
@@ -396,7 +396,7 @@ export class WalkthroughsService extends Disposable implements IWalkthroughsServ
 					type: 'image',
 					path: iconStr
 						? FileAccess.uriToBrowserUri(joinPath(extension.extensionLocation, iconStr)).toString(true)
-						: DefaultIconPath
+						: getDefaultIconPath()
 				},
 				when: ContextKeyExpr.deserialize(override ?? walkthrough.when) ?? ContextKeyExpr.true(),
 			} as const;
diff --git a/src/vs/workbench/contrib/welcomeWalkthrough/common/walkThroughContentProvider.ts b/src/vs/workbench/contrib/welcomeWalkthrough/common/walkThroughContentProvider.ts
index 94a4879c2f9..b58e3ffb222 100644
--- a/src/vs/workbench/contrib/welcomeWalkthrough/common/walkThroughContentProvider.ts
+++ b/src/vs/workbench/contrib/welcomeWalkthrough/common/walkThroughContentProvider.ts
@@ -10,13 +10,13 @@ import { ITextModel, DefaultEndOfLine, EndOfLinePreference, ITextBufferFactory }
 import { ILanguageService } from 'vs/editor/common/languages/language';
 import { IWorkbenchContribution } from 'vs/workbench/common/contributions';
 import { marked } from 'vs/base/common/marked/marked';
-import { Schemas } from 'vs/base/common/network';
+import { FileAccess, Schemas } from 'vs/base/common/network';
 import { Range } from 'vs/editor/common/core/range';
 import { createTextBufferFactory } from 'vs/editor/common/model/textModel';
 import { assertIsDefined } from 'vs/base/common/types';
-import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
+import { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';
 
-export function requireToContent(instantiationService: IInstantiationService, resource: URI): Promise<string> {
+export async function requireToContent(instantiationService: IInstantiationService, resource: URI): Promise<string> {
 	if (!resource.query) {
 		throw new Error('Welcome: invalid resource');
 	}
@@ -26,17 +26,9 @@ export function requireToContent(instantiationService: IInstantiationService, re
 		throw new Error('Welcome: invalid resource');
 	}
 
-	const content: Promise<string> = new Promise<string>((resolve, reject) => {
-		require([query.moduleId], content => {
-			try {
-				resolve(instantiationService.invokeFunction(content.default));
-			} catch (err) {
-				reject(err);
-			}
-		});
-	});
+	const content = await FileAccess.toModuleContent<(accessor: ServicesAccessor) => Promise<string>>(query.moduleId);
 
-	return content;
+	return instantiationService.invokeFunction(content);
 }
 
 export class WalkThroughSnippetContentProvider implements ITextModelContentProvider, IWorkbenchContribution {
diff --git a/src/vs/workbench/services/extensionManagement/browser/extensionBisect.ts b/src/vs/workbench/services/extensionManagement/browser/extensionBisect.ts
index 1029b67197d..2ee4f0db240 100644
--- a/src/vs/workbench/services/extensionManagement/browser/extensionBisect.ts
+++ b/src/vs/workbench/services/extensionManagement/browser/extensionBisect.ts
@@ -65,7 +65,7 @@ class BisectState {
 	) { }
 }
 
-class ExtensionBisectService implements IExtensionBisectService {
+export class ExtensionBisectService implements IExtensionBisectService {
 
 	declare readonly _serviceBrand: undefined;
 
diff --git a/src/vs/workbench/services/extensionManagement/common/extensionManagement.ts b/src/vs/workbench/services/extensionManagement/common/extensionManagement.ts
index 362e485948a..50f5a5f175d 100644
--- a/src/vs/workbench/services/extensionManagement/common/extensionManagement.ts
+++ b/src/vs/workbench/services/extensionManagement/common/extensionManagement.ts
@@ -39,7 +39,7 @@ export interface IExtensionManagementServerService {
 	getExtensionInstallLocation(extension: IExtension): ExtensionInstallLocation | null;
 }
 
-export const DefaultIconPath = FileAccess.asBrowserUri('vs/workbench/services/extensionManagement/common/media/defaultIcon.png').toString(true);
+export const getDefaultIconPath = () => FileAccess.asBrowserUri('vs/workbench/services/extensionManagement/common/media/defaultIcon.png').toString(true);
 
 export type InstallExtensionOnServerEvent = InstallExtensionEvent & { server: IExtensionManagementServer };
 export type UninstallExtensionOnServerEvent = UninstallExtensionEvent & { server: IExtensionManagementServer };
diff --git a/src/vs/workbench/services/extensions/browser/extensionService.ts b/src/vs/workbench/services/extensions/browser/extensionService.ts
index a181772e8c4..0b12e5972ce 100644
--- a/src/vs/workbench/services/extensions/browser/extensionService.ts
+++ b/src/vs/workbench/services/extensions/browser/extensionService.ts
@@ -43,8 +43,10 @@ import { IUserDataInitializationService } from 'vs/workbench/services/userData/b
 import { IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';
 
 export class ExtensionService extends AbstractExtensionService implements IExtensionService {
-
 	constructor(
+		extensionsProposedApi: ExtensionsProposedApi,
+		extensionHostFactory: IExtensionHostFactory,
+		extensionHostKindPicker: IExtensionHostKindPicker,
 		@IInstantiationService instantiationService: IInstantiationService,
 		@INotificationService notificationService: INotificationService,
 		@IBrowserWorkbenchEnvironmentService private readonly _browserEnvironmentService: IBrowserWorkbenchEnvironmentService,
@@ -68,21 +70,10 @@ export class ExtensionService extends AbstractExtensionService implements IExten
 		@IRemoteExplorerService private readonly _remoteExplorerService: IRemoteExplorerService,
 		@IDialogService dialogService: IDialogService,
 	) {
-		const extensionsProposedApi = instantiationService.createInstance(ExtensionsProposedApi);
-		const extensionHostFactory = new BrowserExtensionHostFactory(
-			extensionsProposedApi,
-			() => this._scanWebExtensions(),
-			() => this._getExtensionRegistrySnapshotWhenReady(),
-			instantiationService,
-			remoteAgentService,
-			remoteAuthorityResolverService,
-			extensionEnablementService,
-			logService
-		);
 		super(
 			extensionsProposedApi,
 			extensionHostFactory,
-			new BrowserExtensionHostKindPicker(logService),
+			extensionHostKindPicker,
 			instantiationService,
 			notificationService,
 			_browserEnvironmentService,
@@ -130,7 +121,7 @@ export class ExtensionService extends AbstractExtensionService implements IExten
 		this._register(this._fileService.registerProvider(Schemas.https, provider));
 	}
 
-	private async _scanWebExtensions(): Promise<IExtensionDescription[]> {
+	protected async _scanWebExtensions(): Promise<IExtensionDescription[]> {
 		const system: IExtensionDescription[] = [], user: IExtensionDescription[] = [], development: IExtensionDescription[] = [];
 		try {
 			await Promise.all([
@@ -213,16 +204,16 @@ export class ExtensionService extends AbstractExtensionService implements IExten
 	}
 }
 
-class BrowserExtensionHostFactory implements IExtensionHostFactory {
+export class BrowserExtensionHostFactory implements IExtensionHostFactory {
 
 	constructor(
 		private readonly _extensionsProposedApi: ExtensionsProposedApi,
 		private readonly _scanWebExtensions: () => Promise<IExtensionDescription[]>,
 		private readonly _getExtensionRegistrySnapshotWhenReady: () => Promise<ExtensionDescriptionRegistrySnapshot>,
-		@IInstantiationService private readonly _instantiationService: IInstantiationService,
-		@IRemoteAgentService private readonly _remoteAgentService: IRemoteAgentService,
-		@IRemoteAuthorityResolverService private readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,
-		@IWorkbenchExtensionEnablementService private readonly _extensionEnablementService: IWorkbenchExtensionEnablementService,
+		@IInstantiationService protected readonly _instantiationService: IInstantiationService,
+		@IRemoteAgentService protected readonly _remoteAgentService: IRemoteAgentService,
+		@IRemoteAuthorityResolverService protected readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,
+		@IWorkbenchExtensionEnablementService protected readonly _extensionEnablementService: IWorkbenchExtensionEnablementService,
 		@ILogService private readonly _logService: ILogService,
 	) { }
 
@@ -249,7 +240,7 @@ class BrowserExtensionHostFactory implements IExtensionHostFactory {
 		}
 	}
 
-	private _createLocalExtensionHostDataProvider(runningLocations: ExtensionRunningLocationTracker, desiredRunningLocation: ExtensionRunningLocation, isInitialStart: boolean): IWebWorkerExtensionHostDataProvider {
+	protected _createLocalExtensionHostDataProvider(runningLocations: ExtensionRunningLocationTracker, desiredRunningLocation: ExtensionRunningLocation, isInitialStart: boolean): IWebWorkerExtensionHostDataProvider {
 		return {
 			getInitData: async (): Promise<IWebWorkerExtensionHostInitData> => {
 				if (isInitialStart) {
@@ -346,4 +337,71 @@ export class BrowserExtensionHostKindPicker implements IExtensionHostKindPicker
 	}
 }
 
-registerSingleton(IExtensionService, ExtensionService, InstantiationType.Eager);
+export class BrowserExtensionService extends ExtensionService {
+	constructor(
+		@IInstantiationService instantiationService: IInstantiationService,
+		@INotificationService notificationService: INotificationService,
+		@IBrowserWorkbenchEnvironmentService browserEnvironmentService: IBrowserWorkbenchEnvironmentService,
+		@ITelemetryService telemetryService: ITelemetryService,
+		@IWorkbenchExtensionEnablementService extensionEnablementService: IWorkbenchExtensionEnablementService,
+		@IFileService fileService: IFileService,
+		@IProductService productService: IProductService,
+		@IWorkbenchExtensionManagementService extensionManagementService: IWorkbenchExtensionManagementService,
+		@IWorkspaceContextService contextService: IWorkspaceContextService,
+		@IConfigurationService configurationService: IConfigurationService,
+		@IExtensionManifestPropertiesService extensionManifestPropertiesService: IExtensionManifestPropertiesService,
+		@IWebExtensionsScannerService webExtensionsScannerService: IWebExtensionsScannerService,
+		@ILogService logService: ILogService,
+		@IRemoteAgentService remoteAgentService: IRemoteAgentService,
+		@IRemoteExtensionsScannerService remoteExtensionsScannerService: IRemoteExtensionsScannerService,
+		@ILifecycleService lifecycleService: ILifecycleService,
+		@IRemoteAuthorityResolverService remoteAuthorityResolverService: IRemoteAuthorityResolverService,
+		@IUserDataInitializationService userDataInitializationService: IUserDataInitializationService,
+		@IUserDataProfileService userDataProfileService: IUserDataProfileService,
+		@IWorkspaceTrustManagementService workspaceTrustManagementService: IWorkspaceTrustManagementService,
+		@IRemoteExplorerService remoteExplorerService: IRemoteExplorerService,
+		@IDialogService dialogService: IDialogService,
+	) {
+		const extensionsProposedApi = instantiationService.createInstance(ExtensionsProposedApi);
+		const extensionHostFactory = new BrowserExtensionHostFactory(
+			extensionsProposedApi,
+			() => this._scanWebExtensions(),
+			() => this._getExtensionRegistrySnapshotWhenReady(),
+			instantiationService,
+			remoteAgentService,
+			remoteAuthorityResolverService,
+			extensionEnablementService,
+			logService
+		);
+		super(
+			extensionsProposedApi,
+			extensionHostFactory,
+			new BrowserExtensionHostKindPicker(logService),
+			instantiationService,
+			notificationService,
+			browserEnvironmentService,
+			telemetryService,
+			extensionEnablementService,
+			fileService,
+			productService,
+			extensionManagementService,
+			contextService,
+			configurationService,
+			extensionManifestPropertiesService,
+			webExtensionsScannerService,
+			logService,
+			remoteAgentService,
+			remoteExtensionsScannerService,
+			lifecycleService,
+			remoteAuthorityResolverService,
+			userDataInitializationService,
+			userDataProfileService,
+			workspaceTrustManagementService,
+			remoteExplorerService,
+			dialogService
+		);
+	}
+}
+
+
+registerSingleton(IExtensionService, BrowserExtensionService, InstantiationType.Eager);
diff --git a/src/vs/workbench/services/extensions/browser/extensionUrlHandler.ts b/src/vs/workbench/services/extensions/browser/extensionUrlHandler.ts
index e3c810e97a2..18336ca8950 100644
--- a/src/vs/workbench/services/extensions/browser/extensionUrlHandler.ts
+++ b/src/vs/workbench/services/extensions/browser/extensionUrlHandler.ts
@@ -100,7 +100,7 @@ type ExtensionUrlHandlerClassification = {
  *
  * It also makes sure the user confirms opening URLs directed towards extensions.
  */
-class ExtensionUrlHandler implements IExtensionUrlHandler, IURLHandler {
+export class ExtensionUrlHandler implements IExtensionUrlHandler, IURLHandler {
 
 	readonly _serviceBrand: undefined;
 
diff --git a/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts b/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts
index b6d4f0f3831..7d462411a9c 100644
--- a/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts
+++ b/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts
@@ -76,7 +76,7 @@ export class WebWorkerExtensionHost extends Disposable implements IExtensionHost
 		this._extensionHostLogsLocation = joinPath(this._environmentService.extHostLogsPath, 'webWorker');
 	}
 
-	private async _getWebWorkerExtensionHostIframeSrc(): Promise<string> {
+	protected async _getWebWorkerExtensionHostIframeSrc(): Promise<string> {
 		const suffixSearchParams = new URLSearchParams();
 		if (this._environmentService.debugExtensionHost && this._environmentService.debugRenderer) {
 			suffixSearchParams.set('debugged', '1');
@@ -111,8 +111,6 @@ export class WebWorkerExtensionHost extends Disposable implements IExtensionHost
 				res.searchParams.set('salt', stableOriginUUID);
 				return res.toString();
 			}
-
-			console.warn(`The web worker extension host is started in a same-origin iframe!`);
 		}
 
 		const relativeExtensionHostIframeSrc = FileAccess.asBrowserUri(iframeModulePath);
diff --git a/src/vs/workbench/services/extensions/common/abstractExtensionService.ts b/src/vs/workbench/services/extensions/common/abstractExtensionService.ts
index 4b9a9581b0d..6d87d41df51 100644
--- a/src/vs/workbench/services/extensions/common/abstractExtensionService.ts
+++ b/src/vs/workbench/services/extensions/common/abstractExtensionService.ts
@@ -90,9 +90,9 @@ export abstract class AbstractExtensionService extends Disposable implements IEx
 	private _resolveAuthorityAttempt: number = 0;
 
 	constructor(
-		private readonly _extensionsProposedApi: ExtensionsProposedApi,
-		private readonly _extensionHostFactory: IExtensionHostFactory,
-		private readonly _extensionHostKindPicker: IExtensionHostKindPicker,
+		protected readonly _extensionsProposedApi: ExtensionsProposedApi,
+		protected readonly _extensionHostFactory: IExtensionHostFactory,
+		protected readonly _extensionHostKindPicker: IExtensionHostKindPicker,
 		@IInstantiationService protected readonly _instantiationService: IInstantiationService,
 		@INotificationService protected readonly _notificationService: INotificationService,
 		@IWorkbenchEnvironmentService protected readonly _environmentService: IWorkbenchEnvironmentService,
@@ -207,7 +207,7 @@ export abstract class AbstractExtensionService extends Disposable implements IEx
 
 	//#region deltaExtensions
 
-	private async _handleDeltaExtensions(item: DeltaExtensionsQueueItem): Promise<void> {
+	protected async _handleDeltaExtensions(item: DeltaExtensionsQueueItem): Promise<void> {
 		this._deltaExtensionsQueue.push(item);
 		if (this._inHandleDeltaExtensions) {
 			// Let the current item finish, the new one will be picked up
@@ -1189,7 +1189,7 @@ export interface IExtensionHostFactory {
 	createExtensionHost(runningLocations: ExtensionRunningLocationTracker, runningLocation: ExtensionRunningLocation, isInitialStart: boolean): IExtensionHost | null;
 }
 
-class DeltaExtensionsQueueItem {
+export class DeltaExtensionsQueueItem {
 	constructor(
 		public readonly toAdd: IExtension[],
 		public readonly toRemove: string[] | IExtension[]
diff --git a/src/vs/workbench/services/keybinding/browser/keybindingService.ts b/src/vs/workbench/services/keybinding/browser/keybindingService.ts
index fb13ac6c764..f8c6873926c 100644
--- a/src/vs/workbench/services/keybinding/browser/keybindingService.ts
+++ b/src/vs/workbench/services/keybinding/browser/keybindingService.ts
@@ -391,15 +391,19 @@ export class WorkbenchKeybindingService extends AbstractKeybindingService {
 		return this.userKeybindings.keybindings.length;
 	}
 
-	private updateResolver(): void {
+	protected updateResolver(): void {
 		this._cachedResolver = null;
 		this._onDidUpdateKeybindings.fire();
 	}
 
+	protected getUserKeybindingItems() {
+		return this._resolveUserKeybindingItems(this.userKeybindings.keybindings, false);
+	}
+
 	protected _getResolver(): KeybindingResolver {
 		if (!this._cachedResolver) {
 			const defaults = this._resolveKeybindingItems(KeybindingsRegistry.getDefaultKeybindings(), true);
-			const overrides = this._resolveUserKeybindingItems(this.userKeybindings.keybindings, false);
+			const overrides = this.getUserKeybindingItems();
 			this._cachedResolver = new KeybindingResolver(defaults, overrides, (str) => this._log(str));
 		}
 		return this._cachedResolver;
diff --git a/src/vs/workbench/services/languageDetection/browser/languageDetectionSimpleWorker.ts b/src/vs/workbench/services/languageDetection/browser/languageDetectionSimpleWorker.ts
index e8c8239b35f..9017a971ee5 100644
--- a/src/vs/workbench/services/languageDetection/browser/languageDetectionSimpleWorker.ts
+++ b/src/vs/workbench/services/languageDetection/browser/languageDetectionSimpleWorker.ts
@@ -3,14 +3,12 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import type { ModelOperations, ModelResult } from '@vscode/vscode-languagedetection';
+import { ModelOperations, ModelResult } from '@vscode/vscode-languagedetection';
 import { StopWatch } from 'vs/base/common/stopwatch';
 import { IRequestHandler } from 'vs/base/common/worker/simpleWorker';
 import { EditorSimpleWorker } from 'vs/editor/common/services/editorSimpleWorker';
 import { IEditorWorkerHost } from 'vs/editor/common/services/editorWorkerHost';
 
-type RegexpModel = { detect: (inp: string, langBiases: Record<string, number>, supportedLangs?: string[]) => string | undefined };
-
 /**
  * Called on the worker side
  * @internal
@@ -28,9 +26,6 @@ export class LanguageDetectionSimpleWorker extends EditorSimpleWorker {
 	private static readonly positiveConfidenceCorrectionBucket2 = 0.025;
 	private static readonly negativeConfidenceCorrection = 0.5;
 
-	private _regexpModel: RegexpModel | undefined;
-	private _regexpLoadFailed: boolean = false;
-
 	private _modelOperations: ModelOperations | undefined;
 	private _loadFailed: boolean = false;
 
@@ -63,19 +58,8 @@ export class LanguageDetectionSimpleWorker extends EditorSimpleWorker {
 			return undefined;
 		};
 
-		const historicalResolver = async () => this.runRegexpModel(documentTextSample, langBiases ?? {}, supportedLangs);
-
-		if (preferHistory) {
-			const history = await historicalResolver();
-			if (history) { return history; }
-			const neural = await neuralResolver();
-			if (neural) { return neural; }
-		} else {
-			const neural = await neuralResolver();
-			if (neural) { return neural; }
-			const history = await historicalResolver();
-			if (history) { return history; }
-		}
+		const neural = await neuralResolver();
+		if (neural) { return neural; }
 
 		return undefined;
 	}
@@ -94,50 +78,11 @@ export class LanguageDetectionSimpleWorker extends EditorSimpleWorker {
 		return content;
 	}
 
-	private async getRegexpModel(): Promise<RegexpModel | undefined> {
-		if (this._regexpLoadFailed) {
-			return;
-		}
-		if (this._regexpModel) {
-			return this._regexpModel;
-		}
-		const uri: string = await this._host.fhr('getRegexpModelUri', []);
-		try {
-			this._regexpModel = await import(uri) as RegexpModel;
-			return this._regexpModel;
-		} catch (e) {
-			this._regexpLoadFailed = true;
-			// console.warn('error loading language detection model', e);
-			return;
-		}
-	}
-
-	private async runRegexpModel(content: string, langBiases: Record<string, number>, supportedLangs?: string[]): Promise<string | undefined> {
-		const regexpModel = await this.getRegexpModel();
-		if (!regexpModel) { return; }
-
-		if (supportedLangs?.length) {
-			// When using supportedLangs, normally computed biases are too extreme. Just use a "bitmask" of sorts.
-			for (const lang of Object.keys(langBiases)) {
-				if (supportedLangs.includes(lang)) {
-					langBiases[lang] = 1;
-				} else {
-					langBiases[lang] = 0;
-				}
-			}
-		}
-
-		const detected = regexpModel.detect(content, langBiases, supportedLangs);
-		return detected;
-	}
-
 	private async getModelOperations(): Promise<ModelOperations> {
 		if (this._modelOperations) {
 			return this._modelOperations;
 		}
 
-		const uri: string = await this._host.fhr('getIndexJsUri', []);
-		const { ModelOperations } = await import(uri) as typeof import('@vscode/vscode-languagedetection');
 		this._modelOperations = new ModelOperations({
 			modelJsonLoaderFunc: async () => {
 				const response = await fetch(await this._host.fhr('getModelJsonUri', []));
diff --git a/src/vs/workbench/services/languageStatus/common/languageStatusService.ts b/src/vs/workbench/services/languageStatus/common/languageStatusService.ts
index e10d2a3ef1e..6dd88102a64 100644
--- a/src/vs/workbench/services/languageStatus/common/languageStatusService.ts
+++ b/src/vs/workbench/services/languageStatus/common/languageStatusService.ts
@@ -47,7 +47,7 @@ export interface ILanguageStatusService {
 }
 
 
-class LanguageStatusServiceImpl implements ILanguageStatusService {
+export class LanguageStatusServiceImpl implements ILanguageStatusService {
 
 	declare _serviceBrand: undefined;
 
diff --git a/src/vs/workbench/services/outline/browser/outlineService.ts b/src/vs/workbench/services/outline/browser/outlineService.ts
index f4707432371..7c5cdde39cc 100644
--- a/src/vs/workbench/services/outline/browser/outlineService.ts
+++ b/src/vs/workbench/services/outline/browser/outlineService.ts
@@ -11,7 +11,7 @@ import { IEditorPane } from 'vs/workbench/common/editor';
 import { IOutline, IOutlineCreator, IOutlineService, OutlineTarget } from 'vs/workbench/services/outline/browser/outline';
 import { Event, Emitter } from 'vs/base/common/event';
 
-class OutlineService implements IOutlineService {
+export class OutlineService implements IOutlineService {
 
 	declare _serviceBrand: undefined;
 
diff --git a/src/vs/workbench/services/remote/common/remoteExplorerService.ts b/src/vs/workbench/services/remote/common/remoteExplorerService.ts
index 51edd57eddd..e51481b69b3 100644
--- a/src/vs/workbench/services/remote/common/remoteExplorerService.ts
+++ b/src/vs/workbench/services/remote/common/remoteExplorerService.ts
@@ -138,7 +138,7 @@ export interface IRemoteExplorerService {
 	readonly namedProcesses: Map<number, string>;
 }
 
-class RemoteExplorerService implements IRemoteExplorerService {
+export class RemoteExplorerService implements IRemoteExplorerService {
 	public _serviceBrand: undefined;
 	private _targetType: string[] = [];
 	private readonly _onDidChangeTargetType: Emitter<string[]> = new Emitter<string[]>();
diff --git a/src/vs/workbench/services/remote/common/remoteExtensionsScanner.ts b/src/vs/workbench/services/remote/common/remoteExtensionsScanner.ts
index a466cc1f3a1..09f6a40eb26 100644
--- a/src/vs/workbench/services/remote/common/remoteExtensionsScanner.ts
+++ b/src/vs/workbench/services/remote/common/remoteExtensionsScanner.ts
@@ -16,7 +16,7 @@ import { ILogService } from 'vs/platform/log/common/log';
 import { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';
 import { IActiveLanguagePackService } from 'vs/workbench/services/localization/common/locale';
 
-class RemoteExtensionsScannerService implements IRemoteExtensionsScannerService {
+export class RemoteExtensionsScannerService implements IRemoteExtensionsScannerService {
 
 	declare readonly _serviceBrand: undefined;
 
diff --git a/src/vs/workbench/services/storage/browser/storageService.ts b/src/vs/workbench/services/storage/browser/storageService.ts
index a77c2db9446..2b9a8c19926 100644
--- a/src/vs/workbench/services/storage/browser/storageService.ts
+++ b/src/vs/workbench/services/storage/browser/storageService.ts
@@ -34,6 +34,7 @@ export class BrowserStorageService extends AbstractStorageService {
 
 	private workspaceStorage: IStorage | undefined;
 	private workspaceStorageDatabase: IIndexedDBStorageDatabase | undefined;
+	private readonly workspaceStorageDisposables = this._register(new DisposableStore());
 
 	get hasPendingUpdate(): boolean {
 		return Boolean(
@@ -44,7 +45,7 @@ export class BrowserStorageService extends AbstractStorageService {
 	}
 
 	constructor(
-		private readonly workspace: IAnyWorkspaceIdentifier,
+		private workspace: IAnyWorkspaceIdentifier,
 		private readonly userDataProfileService: IUserDataProfileService,
 		@ILogService private readonly logService: ILogService,
 	) {
@@ -118,12 +119,15 @@ export class BrowserStorageService extends AbstractStorageService {
 	}
 
 	private async createWorkspaceStorage(): Promise<void> {
+		// First clear any previously associated disposables
+		this.workspaceStorageDisposables.clear();
+
 		const workspaceStorageIndexedDB = await IndexedDBStorageDatabase.createWorkspaceStorage(this.workspace.id, this.logService);
 
-		this.workspaceStorageDatabase = this._register(workspaceStorageIndexedDB);
-		this.workspaceStorage = this._register(new Storage(this.workspaceStorageDatabase));
+		this.workspaceStorageDatabase = this.workspaceStorageDisposables.add(workspaceStorageIndexedDB);
+		this.workspaceStorage = this.workspaceStorageDisposables.add(new Storage(this.workspaceStorageDatabase));
 
-		this._register(this.workspaceStorage.onDidChangeStorage(e => this.emitDidChangeValue(StorageScope.WORKSPACE, e)));
+		this.workspaceStorageDisposables.add(this.workspaceStorage.onDidChangeStorage(e => this.emitDidChangeValue(StorageScope.WORKSPACE, e)));
 
 		await this.workspaceStorage.init();
 
@@ -183,7 +187,18 @@ export class BrowserStorageService extends AbstractStorageService {
 	}
 
 	protected async switchToWorkspace(toWorkspace: IAnyWorkspaceIdentifier, preserveData: boolean): Promise<void> {
-		throw new Error('Migrating storage is currently unsupported in Web');
+		const oldWorkspaceStorage = assertIsDefined(this.workspaceStorage);
+		const oldItems = preserveData ? oldWorkspaceStorage.items : new Map();
+
+		// Close old workpace storage
+		await oldWorkspaceStorage.close();
+		this.workspace = toWorkspace;
+
+		// Create new workspace storage & init
+		await this.createWorkspaceStorage();
+
+		// Handle data switch and eventing
+		this.switchData(oldItems, assertIsDefined(this.workspaceStorage), StorageScope.WORKSPACE);
 	}
 
 	protected override shouldFlushWhenIdle(): boolean {
diff --git a/src/vs/workbench/services/terminal/common/embedderTerminalService.ts b/src/vs/workbench/services/terminal/common/embedderTerminalService.ts
index 5e322af7a0f..07b4abdd636 100644
--- a/src/vs/workbench/services/terminal/common/embedderTerminalService.ts
+++ b/src/vs/workbench/services/terminal/common/embedderTerminalService.ts
@@ -52,7 +52,7 @@ export interface IEmbedderTerminalPty {
 	//   setDimensions?(dimensions: TerminalDimensions): void;
 }
 
-class EmbedderTerminalService implements IEmbedderTerminalService {
+export class EmbedderTerminalService implements IEmbedderTerminalService {
 	declare _serviceBrand: undefined;
 
 	private readonly _onDidCreateTerminal = new Emitter<IShellLaunchConfig>();
diff --git a/src/vs/workbench/services/textMate/browser/backgroundTokenization/textMateWorkerTokenizerController.ts b/src/vs/workbench/services/textMate/browser/backgroundTokenization/textMateWorkerTokenizerController.ts
index 850b58e1e6c..2eb835fa2b6 100644
--- a/src/vs/workbench/services/textMate/browser/backgroundTokenization/textMateWorkerTokenizerController.ts
+++ b/src/vs/workbench/services/textMate/browser/backgroundTokenization/textMateWorkerTokenizerController.ts
@@ -3,7 +3,6 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { importAMDNodeModule } from 'vs/amdX';
 import { Disposable } from 'vs/base/common/lifecycle';
 import { IObservable, autorun, keepObserved, observableFromEvent } from 'vs/base/common/observable';
 import { countEOL } from 'vs/editor/common/core/eolCounter';
@@ -17,7 +16,7 @@ import { ContiguousMultilineTokensBuilder } from 'vs/editor/common/tokens/contig
 import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
 import { ArrayEdit, MonotonousIndexTransformer, SingleArrayEdit } from 'vs/workbench/services/textMate/browser/arrayOperation';
 import type { StateDeltas, TextMateTokenizationWorker } from 'vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateTokenizationWorker.worker';
-import type { applyStateStackDiff, StateStack } from 'vscode-textmate';
+import { StateStack, applyStateStackDiff, INITIAL } from 'vscode-textmate';
 
 export class TextMateWorkerTokenizerController extends Disposable {
 	private static _id = 0;
@@ -178,7 +177,6 @@ export class TextMateWorkerTokenizerController extends Disposable {
 		);
 
 		if (!this._applyStateStackDiffFn || !this._initialState) {
-			const { applyStateStackDiff, INITIAL } = await importAMDNodeModule<typeof import('vscode-textmate')>('vscode-textmate', 'release/main.js');
 			this._applyStateStackDiffFn = applyStateStackDiff;
 			this._initialState = INITIAL;
 		}
diff --git a/src/vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateTokenizationWorker.worker.ts b/src/vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateTokenizationWorker.worker.ts
index 3974d642732..6e7de4d5d0d 100644
--- a/src/vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateTokenizationWorker.worker.ts
+++ b/src/vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateTokenizationWorker.worker.ts
@@ -11,6 +11,8 @@ import { ICreateGrammarResult, TMGrammarFactory } from 'vs/workbench/services/te
 import { IValidEmbeddedLanguagesMap, IValidGrammarDefinition, IValidTokenTypeMap } from 'vs/workbench/services/textMate/common/TMScopeRegistry';
 import type { IOnigLib, IRawTheme, StackDiff } from 'vscode-textmate';
 import { TextMateWorkerTokenizer } from './textMateWorkerTokenizer';
+import * as vscodeTextmate from 'vscode-textmate';
+import * as vscodeOniguruma from 'vscode-oniguruma';
 
 /**
  * Defines the worker entry point. Must be exported and named `create`.
@@ -78,9 +80,6 @@ export class TextMateTokenizationWorker {
 	}
 
 	private async _loadTMGrammarFactory(grammarDefinitions: IValidGrammarDefinition[]): Promise<TMGrammarFactory> {
-		const uri = this._createData.textmateMainUri;
-		const vscodeTextmate = await import(uri);
-		const vscodeOniguruma = await import(this._createData.onigurumaMainUri);
 		const response = await fetch(this._createData.onigurumaWASMUri);
 
 		// Using the response directly only works if the server sets the MIME type 'application/wasm'.
diff --git a/src/vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateWorkerTokenizer.ts b/src/vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateWorkerTokenizer.ts
index bc98f7239ce..5937fa2286a 100644
--- a/src/vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateWorkerTokenizer.ts
+++ b/src/vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateWorkerTokenizer.ts
@@ -3,7 +3,6 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { importAMDNodeModule } from 'vs/amdX';
 import { RunOnceScheduler } from 'vs/base/common/async';
 import { observableValue } from 'vs/base/common/observable';
 import { setTimeout0 } from 'vs/base/common/platform';
@@ -16,7 +15,7 @@ import { ContiguousMultilineTokensBuilder } from 'vs/editor/common/tokens/contig
 import { LineTokens } from 'vs/editor/common/tokens/lineTokens';
 import { TextMateTokenizationSupport } from 'vs/workbench/services/textMate/browser/tokenizationSupport/textMateTokenizationSupport';
 import { TokenizationSupportWithLineLimit } from 'vs/workbench/services/textMate/browser/tokenizationSupport/tokenizationSupportWithLineLimit';
-import type { StackDiff, StateStack, diffStateStacksRefEq } from 'vscode-textmate';
+import { StackDiff, StateStack, diffStateStacksRefEq } from 'vscode-textmate';
 import { ICreateGrammarResult } from 'vs/workbench/services/textMate/common/TMGrammarFactory';
 import { StateDeltas } from 'vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateTokenizationWorker.worker';
 
@@ -113,7 +112,6 @@ export class TextMateWorkerTokenizer extends MirrorTextModel {
 		}
 
 		if (!this._diffStateStacksRefEqFn) {
-			const { diffStateStacksRefEq } = await importAMDNodeModule<typeof import('vscode-textmate')>('vscode-textmate', 'release/main.js');
 			this._diffStateStacksRefEqFn = diffStateStacksRefEq;
 		}
 
diff --git a/src/vs/workbench/services/textMate/browser/textMateTokenizationFeatureImpl.ts b/src/vs/workbench/services/textMate/browser/textMateTokenizationFeatureImpl.ts
index 1ba671448d2..bec87c04f1e 100644
--- a/src/vs/workbench/services/textMate/browser/textMateTokenizationFeatureImpl.ts
+++ b/src/vs/workbench/services/textMate/browser/textMateTokenizationFeatureImpl.ts
@@ -3,7 +3,6 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { importAMDNodeModule } from 'vs/amdX';
 import * as dom from 'vs/base/browser/dom';
 import { equals as equalArray } from 'vs/base/common/arrays';
 import { Color } from 'vs/base/common/color';
@@ -38,6 +37,8 @@ import { ITMSyntaxExtensionPoint, grammarsExtPoint } from 'vs/workbench/services
 import { IValidEmbeddedLanguagesMap, IValidGrammarDefinition, IValidTokenTypeMap } from 'vs/workbench/services/textMate/common/TMScopeRegistry';
 import { ITextMateThemingRule, IWorkbenchColorTheme, IWorkbenchThemeService } from 'vs/workbench/services/themes/common/workbenchThemeService';
 import type { IGrammar, IOnigLib, IRawTheme } from 'vscode-textmate';
+import * as vscodeTextmate from 'vscode-textmate';
+import * as vscodeOniguruma from 'vscode-oniguruma';
 
 export class TextMateTokenizationFeature extends Disposable implements ITextMateTokenizationService {
 	private static reportTokenizationTimeCounter = { sync: 0, async: 0 };
@@ -245,7 +246,7 @@ export class TextMateTokenizationFeature extends Disposable implements ITextMate
 			return this._grammarFactory;
 		}
 
-		const [vscodeTextmate, vscodeOniguruma] = await Promise.all([importAMDNodeModule<typeof import('vscode-textmate')>('vscode-textmate', 'release/main.js'), this._getVSCodeOniguruma()]);
+		const vscodeOniguruma = await this._getVSCodeOniguruma();
 		const onigLib: Promise<IOnigLib> = Promise.resolve({
 			createOnigScanner: (sources: string[]) => vscodeOniguruma.createOnigScanner(sources),
 			createOnigString: (str: string) => vscodeOniguruma.createOnigString(str)
@@ -356,7 +357,7 @@ export class TextMateTokenizationFeature extends Disposable implements ITextMate
 	private _getVSCodeOniguruma(): Promise<typeof import('vscode-oniguruma')> {
 		if (!this._vscodeOniguruma) {
 			this._vscodeOniguruma = (async () => {
-				const [vscodeOniguruma, wasm] = await Promise.all([importAMDNodeModule<typeof import('vscode-oniguruma')>('vscode-oniguruma', 'release/main.js'), this._loadVSCodeOnigurumaWASM()]);
+				const wasm = await this._loadVSCodeOnigurumaWASM();
 				await vscodeOniguruma.loadWASM({
 					data: wasm,
 					print: (str: string) => {
diff --git a/src/vs/workbench/services/textfile/common/encoding.ts b/src/vs/workbench/services/textfile/common/encoding.ts
index ad67fb4f422..fadf86cece5 100644
--- a/src/vs/workbench/services/textfile/common/encoding.ts
+++ b/src/vs/workbench/services/textfile/common/encoding.ts
@@ -5,7 +5,6 @@
 
 import { Readable, ReadableStream, newWriteableStream, listenStream } from 'vs/base/common/stream';
 import { VSBuffer, VSBufferReadable, VSBufferReadableStream } from 'vs/base/common/buffer';
-import { importAMDNodeModule } from 'vs/amdX';
 import { CancellationTokenSource } from 'vs/base/common/cancellation';
 
 export const UTF8 = 'utf8';
@@ -80,7 +79,7 @@ class DecoderStream implements IDecoderStream {
 	static async create(encoding: string): Promise<DecoderStream> {
 		let decoder: IDecoderStream | undefined = undefined;
 		if (encoding !== UTF8) {
-			const iconv = await importAMDNodeModule<typeof import('@vscode/iconv-lite-umd')>('@vscode/iconv-lite-umd', 'lib/iconv-lite-umd.js');
+			const iconv = await import('@vscode/iconv-lite-umd');
 			decoder = iconv.getDecoder(toNodeEncoding(encoding));
 		} else {
 			const utf8TextDecoder = new TextDecoder();
@@ -213,7 +212,7 @@ export function toDecodeStream(source: VSBufferReadableStream, options: IDecodeS
 }
 
 export async function toEncodeReadable(readable: Readable<string>, encoding: string, options?: { addBOM?: boolean }): Promise<VSBufferReadable> {
-	const iconv = await importAMDNodeModule<typeof import('@vscode/iconv-lite-umd')>('@vscode/iconv-lite-umd', 'lib/iconv-lite-umd.js');
+	const iconv = await import('@vscode/iconv-lite-umd');
 	const encoder = iconv.getEncoder(toNodeEncoding(encoding), options);
 
 	let bytesWritten = false;
@@ -262,7 +261,7 @@ export async function toEncodeReadable(readable: Readable<string>, encoding: str
 }
 
 export async function encodingExists(encoding: string): Promise<boolean> {
-	const iconv = await importAMDNodeModule<typeof import('@vscode/iconv-lite-umd')>('@vscode/iconv-lite-umd', 'lib/iconv-lite-umd.js');
+	const iconv = await import('@vscode/iconv-lite-umd');
 
 	return iconv.encodingExists(toNodeEncoding(encoding));
 }
@@ -318,7 +317,7 @@ const IGNORE_ENCODINGS = ['ascii', 'utf-16', 'utf-32'];
  * Guesses the encoding from buffer.
  */
 async function guessEncodingByBuffer(buffer: VSBuffer): Promise<string | null> {
-	const jschardet = await importAMDNodeModule<typeof import('jschardet')>('jschardet', 'dist/jschardet.min.js');
+	const jschardet = await import('jschardet');
 
 	// ensure to limit buffer for guessing due to https://github.com/aadsm/jschardet/issues/53
 	const limitedBuffer = buffer.slice(0, AUTO_ENCODING_GUESS_MAX_BYTES);
diff --git a/src/vs/workbench/services/userDataProfile/common/remoteUserDataProfiles.ts b/src/vs/workbench/services/userDataProfile/common/remoteUserDataProfiles.ts
index d3ef612836b..0d0fb8d2862 100644
--- a/src/vs/workbench/services/userDataProfile/common/remoteUserDataProfiles.ts
+++ b/src/vs/workbench/services/userDataProfile/common/remoteUserDataProfiles.ts
@@ -25,7 +25,7 @@ export interface IRemoteUserDataProfilesService {
 	getRemoteProfile(localProfile: IUserDataProfile): Promise<IUserDataProfile>;
 }
 
-class RemoteUserDataProfilesService extends Disposable implements IRemoteUserDataProfilesService {
+export class RemoteUserDataProfilesService extends Disposable implements IRemoteUserDataProfilesService {
 
 	readonly _serviceBrand: undefined;
 
diff --git a/src/vs/workbench/services/userDataSync/common/userDataSyncUtil.ts b/src/vs/workbench/services/userDataSync/common/userDataSyncUtil.ts
index 45329df40c4..84119b7c042 100644
--- a/src/vs/workbench/services/userDataSync/common/userDataSyncUtil.ts
+++ b/src/vs/workbench/services/userDataSync/common/userDataSyncUtil.ts
@@ -12,7 +12,7 @@ import { URI } from 'vs/base/common/uri';
 import { ITextModelService } from 'vs/editor/common/services/resolverService';
 import { ITextResourcePropertiesService, ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfiguration';
 
-class UserDataSyncUtilService implements IUserDataSyncUtilService {
+export class UserDataSyncUtilService implements IUserDataSyncUtilService {
 
 	declare readonly _serviceBrand: undefined;
 
diff --git a/src/vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService.ts b/src/vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService.ts
index 4653e395be9..1eccfce4bf4 100644
--- a/src/vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService.ts
+++ b/src/vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService.ts
@@ -14,7 +14,7 @@ import { ConfigurationScope, IConfigurationRegistry, Extensions as Configuration
 import { Registry } from 'vs/platform/registry/common/platform';
 import { ICommandService } from 'vs/platform/commands/common/commands';
 import { distinct, firstOrDefault } from 'vs/base/common/arrays';
-import { basename, isEqual, isEqualAuthority, joinPath, removeTrailingPathSeparator } from 'vs/base/common/resources';
+import { basename, isEqual, joinPath, removeTrailingPathSeparator } from 'vs/base/common/resources';
 import { INotificationService, Severity } from 'vs/platform/notification/common/notification';
 import { IFileService } from 'vs/platform/files/common/files';
 import { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';
@@ -169,11 +169,6 @@ export abstract class AbstractWorkspaceEditingService implements IWorkspaceEditi
 
 	private async doAddFolders(foldersToAdd: IWorkspaceFolderCreationData[], index?: number, donotNotifyError: boolean = false): Promise<void> {
 		const state = this.contextService.getWorkbenchState();
-		const remoteAuthority = this.environmentService.remoteAuthority;
-		if (remoteAuthority) {
-			// https://github.com/microsoft/vscode/issues/94191
-			foldersToAdd = foldersToAdd.filter(folder => folder.uri.scheme !== Schemas.file && (folder.uri.scheme !== Schemas.vscodeRemote || isEqualAuthority(folder.uri.authority, remoteAuthority)));
-		}
 
 		// If we are in no-workspace or single-folder workspace, adding folders has to
 		// enter a workspace.
